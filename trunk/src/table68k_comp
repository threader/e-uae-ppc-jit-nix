;***
;*** E-UAE JIT compiling
;***
;*** Opcode table
;***
;*** Lists all JIT supported instuctions with the required flags.
;*** If an instruction was not listed here then it is not supported
;*** by the JIT compiling and the execution falls back to the
;*** interpretive emulation.

;*** Format:
;*** opcode_name implemented binary_code_in_4_parts jump constjump srcaddr destaddr
;***   implemented - this instruction was implemented or not (1/0)
;***   binary code - contains "S" and "s" as source addr/reg, 
;***                          "D" and "d" as destination bits addr/reg
;***                          "x" for ignoring that bit
;***   jump - compile stopping opcode (branch mostly) (1/0)
;***   constjump - constant jump opcode (1/0)
;***   srcaddr - source addressing
;***   destaddr - destination addressing
;***
;*** Addressing markups:
;***
;*** regD    - Dx register: Dx
;*** regA    - Ax register: Ax
;*** indA    - Ax indirect: (Ax)
;*** indmAy  - Ax indirect with predecrement : -(Ax), y - size: B, W, L
;*** indApy  - Ax indirect with postincrement: (Ax)+, y - size: B, W, L
;*** immed   - immediate value: #x - size: B, W, L
;*** immedQ  - immediate value in opcode
;*** indAd16 - Ax indirect d16 indexed: d16(Ax)
;*** indPCd16 - PC indirect d16 indexed: d16(PC)
;*** absW    - absolute word sized address: x.w
;*** absL    - absolute longword sized address: x.l
;*** indAcp  - Ax indirect with complex displacement, eg: ([bd, An] Rn, od)
;*** indPCcp - PC indirect with complex displacement, eg: ([bd, PC] Rn, od)

#Addressing
;address   modus  register
;none should be the first int the list
none        xxx    xxx
regD        000    rrr
regA        001    rrr
indA        010    rrr
indmAL      100    rrr
indmAW      100    rrr
indmAB      100    rrr
indApL      011    rrr
indApW      011    rrr
indApB      011    rrr
immedL      111    100
immedW      111    100
immedB      111    100
immedQ      rrr    rrr
indAd16     101    rrr
indPCd16    111    010
absW        111    000
absL        111    001
indAcp      110    rrr
indPCcp     111    011

;Conditional code bits
CC_cc   0    100
CC_cs   0    101
CC_eq   0    111
CC_ge   1    100
CC_gt   1    110
CC_hi   0    010
CC_le   1    111
CC_ls   0    011
CC_lt   1    101
CC_mi   1    011
CC_ne   0    110
CC_pl   1    010
CC_vc   1    000
CC_vs   1    001
CC_t    0    000
CC_f    0    001

;FPU Conditional code bits
FCC_f      000    000
FCC_eq     000    001
FCC_ogt    000    010
FCC_oge    000    011
FCC_olt    000    100
FCC_ole    000    101
FCC_ogl    000    110
FCC_or     000    111
FCC_un     001    000
FCC_ueq    001    001
FCC_ugt    001    010
FCC_uge    001    011
FCC_ult    001    100
FCC_ule    001    101
FCC_ne     001    110
FCC_t      001    111
FCC_sf     010    000
FCC_seq    010    001
FCC_gt     010    010
FCC_ge     010    011
FCC_lt     010    100
FCC_le     010    101
FCC_gl     010    110
FCC_gle    010    111
FCC_ngle   011    000
FCC_ngl    011    001
FCC_nle    011    010
FCC_nlt    011    011
FCC_nge    011    100
FCC_ngt    011    101
FCC_sne    011    110
FCC_st     011    111

#Opcodes
;Format:
;name      impl  ext  bincode            jump|cjmp  srcaddr destaddr
;---------------------------------------------------------------------
;*** Data moving instructions
;*** Move register-register
MOVREG2REGL  1   0    0010 dddD DDSS Ssss   0 0     regD,regA    regD
MOVREG2REGW  1   0    0011 dddD DDSS Ssss   0 0     regD,regA    regD
MOVREG2REGB  1   0    0001 dddD DDSS Ssss   0 0     regD     regD

;If the target is an address register, then flags kept unchanged
MOVAREG2REGL 1   0    0010 dddD DDSS Ssss   0 0     regD,regA    regA
;Source data must be sign-extended to longword
MOVAREG2REGW 1   0    0011 dddD DDSS Ssss   0 0     regD,regA    regA

;*** Move memory to memory
MOVMEM2MEML  1   0    0010 dddD DDSS Ssss   0 0     indA,indApL,indmAL,indAd16,indAcp,indPCcp,indPCd16,absW,absL    indA,indApL,indmAL,indAd16,indAcp,absW,absL
MOVMEM2MEMW  1   0    0011 dddD DDSS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    indA,indApW,indmAW,indAd16,indAcp,absW,absL
MOVMEM2MEMB  1   0    0001 dddD DDSS Ssss   0 0     indA,indApB,indmAB,indAd16,indAcp,indPCcp,indPCd16,absW,absL    indA,indApB,indmAB,indAd16,indAcp,absW,absL

;*** Move register to memory
MOVREG2MEML  1   0    0010 dddD DDSS Ssss   0 0     regD,regA    indA,indApL,indmAL,indAd16,indAcp,absW,absL
MOVREG2MEMW  1   0    0011 dddD DDSS Ssss   0 0     regD,regA    indA,indApW,indmAW,indAd16,indAcp,absW,absL
MOVREG2MEMB  1   0    0001 dddD DDSS Ssss   0 0     regD    indA,indApB,indmAB,indAd16,indAcp,absW,absL

;*** Move memory to register
;move.z x.w,dy
MOVMEM2REGL  1   0    0010 dddD DDSS Ssss   0 0     indA,indApL,indmAL,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD
MOVMEM2REGW  1   0    0011 dddD DDSS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD
MOVMEM2REGB  1   0    0001 dddD DDSS Ssss   0 0     indA,indApB,indmAB,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD

;If the target is an address register, then flags kept unchanged
MOVAMEM2REGL 1   0    0010 dddD DDSS Ssss   0 0     indA,indApL,indmAL,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regA

;Address registers are always longword-sized, doesn't matter what is the specified size,
;immediate word sized data will be sign-extended to longword
MOVAMEM2REGW 1   0    0011 dddD DDSS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regA

;*** Load immediate to a register
;move.z #y,dx
MOVIMM2REGL  1   0    0010 dddD DDSS Ssss   0 0     immedL    regD
MOVIMM2REGW  1   0    0011 dddD DDSS Ssss   0 0     immedW    regD
MOVIMM2REGB  1   0    0001 dddD DDSS Ssss   0 0     immedB    regD

;If the target is an address register, then flags kept unchanged
MOVAIMM2REGL 1   0    0010 dddD DDSS Ssss   0 0     immedL    regA

;Address registers are always longword-sized, doesn't matter what is the specified size,
;immediate word sized data will be sign-extended to longword
MOVAIMM2REGW 1   0    0011 dddD DDSS Ssss   0 0     immedW    regA

;*** Move quick
MOVEQ        1   0    0111 ddd0 ssss ssss   0 0     immedQ    regD

;*** Move multiple registers to memory
MOVEM2MEML   1   1    0100 1000 11DD Dddd   0 0     none    indA,indAd16,indAcp,absW,absL
MOVEM2MEMW   1   1    0100 1000 10DD Dddd   0 0     none    indA,indAd16,indAcp,absW,absL

MOVEM2REGL   1   1    0100 1100 11SS Ssss   0 0     indA,indAd16,indAcp,indPCd16,indPCcp,absW,absL none
MOVEM2REGW   1   1    0100 1100 10SS Ssss   0 0     indA,indAd16,indAcp,indPCd16,indPCcp,absW,absL none

;movem.x dx-ay,-(az)
MOVEM2MEMUL  1   1    0100 1000 1110 0ddd   0 0     none    regA
MOVEM2MEMUW  1   1    0100 1000 1010 0ddd   0 0     none    regA

;movem.x (az)+,dx-ay
MOVEM2REGUL  1   1    0100 1100 1101 1sss   0 0     regA    none
MOVEM2REGUW  1   1    0100 1100 1001 1sss   0 0     regA    none

;*** Move immediate to memory
;move.z #y,mem
MOVIMM2MEML  1   0    0010 dddD DDSS Ssss   0 0     immedL    indA,indApL,indmAL,indAd16,indAcp,absW,absL
MOVIMM2MEMW  1   0    0011 dddD DDSS Ssss   0 0     immedW    indA,indApW,indmAW,indAd16,indAcp,absW,absL
MOVIMM2MEMB  1   0    0001 dddD DDSS Ssss   0 0     immedB    indA,indApB,indmAB,indAd16,indAcp,absW,absL

;*** Move16 (MC68040 only)
MOV16REG2REGU 0   1    1111 0110 0010 0sss   0 0    regA    none
MOV16REG2MEMU 0   0    1111 0110 0000 0sss   0 0    regA    immedL
MOV16MEM2REGU 0   0    1111 0110 0000 1ddd   0 0    immedL  regA
MOV16REG2MEM  0   0    1111 0110 0001 0sss   0 0    regA    immedL
MOV16MEM2REG  0   0    1111 0110 0001 1ddd   0 0    immedL  regA

;*** Clear
CLRREGL       1   0    0100 0010 10DD Dddd   0 0     none    regD
CLRREGW       1   0    0100 0010 01DD Dddd   0 0     none    regD
CLRREGB       1   0    0100 0010 00DD Dddd   0 0     none    regD

CLRMEML       1   0    0100 0010 10DD Dddd   0 0     none    indA,indApL,indmAL,indAd16,indAcp,absW,absL
CLRMEMW       1   0    0100 0010 01DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL
CLRMEMB       1   0    0100 0010 00DD Dddd   0 0     none    indA,indApB,indmAB,indAd16,indAcp,absW,absL

;*** Load Effective Address
LEAIMML       1   0    0100 ddd1 1111 1001   0 0     immedL    regA

;Address registers are always longword-sized, doesn't matter what is the specified size,
;immediate word sized data will be sign-extended to longword
LEAIMMW       1   0    0100 ddd1 1111 1000   0 0     immedW    regA
LEAIND        1   0    0100 ddd1 11SS Ssss   0 0     indA,indPCd16,indAd16,indAcp,indPCcp    regA

;*** Push effective address
PEAIMML       1   0    0100 1000 0111 1001   0 0     immedL    none
PEAIMMW       1   0    0100 1000 0111 1000   0 0     immedW    none
PEAIND        1   0    0100 1000 01SS Ssss   0 0     indA,indPCd16,indAd16,indAcp,indPCcp    none

;---------------------------------------------------------------------
;*** Special data moving instructions
;*** Set Conditional
STREGB        1   0    0101 0000 11DD Dddd   0 0     none    regD
SFREGB        1   0    0101 0001 11DD Dddd   0 0     none    regD
SCCREGB       1   0    0101 Ssss 11DD Dddd   0 0     CC_cc,CC_cs,CC_eq,CC_ge,CC_gt,CC_hi,CC_le,CC_ls,CC_lt,CC_mi,CC_ne,CC_pl,CC_vc,CC_vs   regD

STMEMB        1   0    0101 0000 11DD Dddd   0 0     none    indA,indApB,indmAB,indAd16,indAcp,absW,absL
SFMEMB        1   0    0101 0001 11DD Dddd   0 0     none    indA,indApB,indmAB,indAd16,indAcp,absW,absL
SCCMEMB       1   0    0101 Ssss 11DD Dddd   0 0     CC_cc,CC_cs,CC_eq,CC_ge,CC_gt,CC_hi,CC_le,CC_ls,CC_lt,CC_mi,CC_ne,CC_pl,CC_vc,CC_vs   indA,indApB,indmAB,indAd16,indAcp,absW,absL

;*** Condition Code Register moving
MOVCCR2REGW   1   0    0100 0010 11DD Dddd   0 0     none    regD
MOVCCR2MEMW   1   0    0100 0010 11DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL

MOVIMM2CCRW   1   0    0100 0100 11SS Ssss   0 0     immedW  none
MOVREG2CCRW   1   0    0100 0100 11SS Ssss   0 0     regD    none
MOVMEM2CCRW   1   0    0100 0100 11SS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    none

;---------------------------------------------------------------------
;*** Branch instructions
;*** DBcc
DBCOND        1   1    0101 Ssss 1100 1ddd   1 0     CC_cc,CC_cs,CC_eq,CC_ge,CC_gt,CC_hi,CC_le,CC_ls,CC_lt,CC_mi,CC_ne,CC_pl,CC_vc,CC_vs    regD
DBF           1   0    0101 0001 1100 1ddd   1 0     immedW    regD

;*** Bcc.b
;Must precede Bcc.w and Bcc.l
BCOND         1   0    0110 Ssss dddd dddd   1 0     CC_cc,CC_cs,CC_eq,CC_ge,CC_gt,CC_hi,CC_le,CC_ls,CC_lt,CC_mi,CC_ne,CC_pl,CC_vc,CC_vs    immedQ
BRA           1   0    0110 0000 ssss ssss   1 1     immedQ    none
BSR           1   0    0110 0001 ssss ssss   1 1     immedQ    none

;*** Bcc.w
BCOND         1   0    0110 Ssss 0000 0000   1 0     CC_cc,CC_cs,CC_eq,CC_ge,CC_gt,CC_hi,CC_le,CC_ls,CC_lt,CC_mi,CC_ne,CC_pl,CC_vc,CC_vs    immedW
BRA           1   0    0110 0000 0000 0000   1 1     immedW    none
BSR           1   0    0110 0001 0000 0000   1 1     immedW    none

;*** Bcc.l
BCOND         1   0    0110 Ssss 1111 1111   1 0     CC_cc,CC_cs,CC_eq,CC_ge,CC_gt,CC_hi,CC_le,CC_ls,CC_lt,CC_mi,CC_ne,CC_pl,CC_vc,CC_vs    immedL
BRA           1   0    0110 0000 1111 1111   1 1     immedL    none
BSR           1   0    0110 0001 1111 1111   1 1     immedL    none

;*** Jump
;JMPIMM modified to take argument directly from address translation
;original source addressing is absL
JMPIMM        1   0    0100 1110 1111 1001   1 1     immedL    none
JMPIND        1   0    0100 1110 11SS Ssss   1 0     indAd16,indPCd16,indAd16,indAcp,indPCcp,indA    none

;JSRIMM modified to take argument directly from address translation
;original source addressing is absL
JSRIMM        1   0    0100 1110 1011 1001   1 1     immedL    none
JSRIND        1   0    0100 1110 10SS Ssss   1 0     indAd16,indPCd16,indAcp,indPCcp,indA    none

RTS           1   0    0100 1110 0111 0101   1 0     none    none
RTD           1   0    0100 1110 0111 0100   1 0     immedW    none
RTR           1   0    0100 1110 0111 0111   1 0     none    none

;---------------------------------------------------------------------
;*** Logic instructions
;*** Exclusive or
EORIMM2REGL   1   0    0000 1010 10DD Dddd   0 0     immedL    regD
EORIMM2REGW   1   0    0000 1010 01DD Dddd   0 0     immedW    regD
EORIMM2REGB   1   0    0000 1010 00DD Dddd   0 0     immedB    regD

EORIMM2MEML   1   0    0000 1010 10DD Dddd   0 0     immedL    indA,indApL,indmAL,indAd16,indAcp,absW,absL
EORIMM2MEMW   1   0    0000 1010 01DD Dddd   0 0     immedW    indA,indApW,indmAW,indAd16,indAcp,absW,absL
EORIMM2MEMB   1   0    0000 1010 00DD Dddd   0 0     immedB    indA,indApB,indmAB,indAd16,indAcp,absW,absL

EORREG2REGL   1   0    1011 sss1 10DD Dddd   0 0     regD    regD
EORREG2REGW   1   0    1011 sss1 01DD Dddd   0 0     regD    regD
EORREG2REGB   1   0    1011 sss1 00DD Dddd   0 0     regD    regD

EORREG2MEML   1   0    1011 sss1 10DD Dddd   0 0     regD    indA,indApL,indmAL,indAd16,indAcp,absW,absL
EORREG2MEMW   1   0    1011 sss1 01DD Dddd   0 0     regD    indA,indApW,indmAW,indAd16,indAcp,absW,absL
EORREG2MEMB   1   0    1011 sss1 00DD Dddd   0 0     regD    indA,indApB,indmAB,indAd16,indAcp,absW,absL

;*** And
;ANDI.x #imm,Dy
ANDIMM2REGL   1   0    0000 0010 10DD Dddd   0 0     immedL    regD
ANDIMM2REGW   1   0    0000 0010 01DD Dddd   0 0     immedW    regD
ANDIMM2REGB   1   0    0000 0010 00DD Dddd   0 0     immedB    regD

ANDIMM2MEML   1   0    0000 0010 10DD Dddd   0 0     immedL    indA,indApL,indmAL,indAd16,indAcp,absW,absL
ANDIMM2MEMW   1   0    0000 0010 01DD Dddd   0 0     immedW    indA,indApW,indmAW,indAd16,indAcp,absW,absL
ANDIMM2MEMB   1   0    0000 0010 00DD Dddd   0 0     immedB    indA,indApB,indmAB,indAd16,indAcp,absW,absL

ANDREG2REGL   1   0    1100 ddd0 10SS Ssss   0 0     regD,regA    regD
ANDREG2REGW   1   0    1100 ddd0 01SS Ssss   0 0     regD,regA    regD
ANDREG2REGB   1   0    1100 ddd0 00SS Ssss   0 0     regD,regA    regD

ANDREG2MEML   1   0    1100 sss1 10DD Dddd   0 0     regD    indA,indApL,indmAL,indAd16,indAcp,absW,absL
ANDREG2MEMW   1   0    1100 sss1 01DD Dddd   0 0     regD    indA,indApW,indmAW,indAd16,indAcp,absW,absL
ANDREG2MEMB   1   0    1100 sss1 00DD Dddd   0 0     regD    indA,indApB,indmAB,indAd16,indAcp,absW,absL

ANDMEM2REGL   1   0    1100 ddd0 10SS Ssss   0 0     indA,indApL,indmAL,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD
ANDMEM2REGW   1   0    1100 ddd0 01SS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD
ANDMEM2REGB   1   0    1100 ddd0 00SS Ssss   0 0     indA,indApB,indmAB,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD

;AND.x #imm,Dy
ANDIMM2REGL   1   0    1100 ddd0 10SS Ssss   0 0     immedL    regD
ANDIMM2REGW   1   0    1100 ddd0 01SS Ssss   0 0     immedW    regD
ANDIMM2REGB   1   0    1100 ddd0 00SS Ssss   0 0     immedB    regD

;*** Or
;ORI #imm
ORIMM2REGL    1   0    0000 0000 10DD Dddd   0 0     immedL    regD
ORIMM2REGW    1   0    0000 0000 01DD Dddd   0 0     immedW    regD
ORIMM2REGB    1   0    0000 0000 00DD Dddd   0 0     immedB    regD

ORIMM2MEML    1   0    0000 0000 10DD Dddd   0 0     immedL    indA,indApL,indmAL,indAd16,indAcp,absW,absL
ORIMM2MEMW    1   0    0000 0000 01DD Dddd   0 0     immedW    indA,indApW,indmAW,indAd16,indAcp,absW,absL
ORIMM2MEMB    1   0    0000 0000 00DD Dddd   0 0     immedB    indA,indApB,indmAB,indAd16,indAcp,absW,absL

ORREG2REGL    1   0    1000 ddd0 10SS Ssss   0 0     regD,regA    regD
ORREG2REGW    1   0    1000 ddd0 01SS Ssss   0 0     regD,regA    regD
ORREG2REGB    1   0    1000 ddd0 00SS Ssss   0 0     regD,regA    regD

ORREG2MEML    1   0    1000 sss1 10DD Dddd   0 0     regD    indA,indApL,indmAL,indAd16,indAcp,absW,absL
ORREG2MEMW    1   0    1000 sss1 01DD Dddd   0 0     regD    indA,indApW,indmAW,indAd16,indAcp,absW,absL
ORREG2MEMB    1   0    1000 sss1 00DD Dddd   0 0     regD    indA,indApB,indmAB,indAd16,indAcp,absW,absL

ORMEM2REGL    1   0    1000 ddd0 10SS Ssss   0 0     indA,indApL,indmAL,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD
ORMEM2REGW    1   0    1000 ddd0 01SS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD
ORMEM2REGB    1   0    1000 ddd0 00SS Ssss   0 0     indA,indApB,indmAB,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD

;OR #imm
ORIMM2REGL    1   0    1000 ddd0 10SS Ssss   0 0     immedL    regD
ORIMM2REGW    1   0    1000 ddd0 01SS Ssss   0 0     immedW    regD
ORIMM2REGB    1   0    1000 ddd0 00SS Ssss   0 0     immedB    regD

;*** Not
NOTREGL       1   0    0100 0110 10DD Dddd   0 0     none    regD
NOTREGW       1   0    0100 0110 01DD Dddd   0 0     none    regD
NOTREGB       1   0    0100 0110 00DD Dddd   0 0     none    regD

NOTMEML       1   0    0100 0110 10DD Dddd   0 0     none    indA,indApL,indmAL,indAd16,indAcp,absW,absL
NOTMEMW       1   0    0100 0110 01DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL
NOTMEMB       1   0    0100 0110 00DD Dddd   0 0     none    indA,indApB,indmAB,indAd16,indAcp,absW,absL

;*** Condition Code Register bit logic
ANDIMM2CCRB   1   0    0000 0010 0011 1100   0 0     immedB    none
ORIMM2CCRB    1   0    0000 0000 0011 1100   0 0     immedB    none
EORIMM2CCRB   1   0    0000 1010 0011 1100   0 0     immedB    none

;*** Btst
BTSTIMM2MEM   1   0    0000 1000 00DD Dddd   0 0     immedW    indA,indApB,indmAB,indAd16,indAcp,indPCcp,absW,absL,indPCd16
BTSTREG2MEM   1   0    0000 sss1 00DD Dddd   0 0     regD    indA,indApB,indmAB,indAd16,indAcp,indPCcp,absW,absL,indPCd16
BTSTIMM2REG   1   0    0000 1000 00DD Dddd   0 0     immedW    regD
BTSTREG2REG   1   0    0000 sss1 00DD Dddd   0 0     regD    regD
BTSTREG2IMM   1   0    0000 sss1 00DD Dddd   0 0     regD    immedB

;*** Bset
BSETIMM2MEM   1   0    0000 1000 11DD Dddd   0 0     immedW    indA,indApB,indmAB,indAd16,indAcp,absW,absL
BSETREG2MEM   1   0    0000 sss1 11DD Dddd   0 0     regD    indA,indApB,indmAB,indAd16,indAcp,absW,absL
BSETIMM2REG   1   0    0000 1000 11DD Dddd   0 0     immedW    regD
BSETREG2REG   1   0    0000 sss1 11DD Dddd   0 0     regD    regD

;*** Bclr
BCLRIMM2MEM   1   0    0000 1000 10DD Dddd   0 0     immedW    indA,indApB,indmAB,indAd16,indAcp,absW,absL
BCLRREG2MEM   1   0    0000 sss1 10DD Dddd   0 0     regD    indA,indApB,indmAB,indAd16,indAcp,absW,absL
BCLRIMM2REG   1   0    0000 1000 10DD Dddd   0 0     immedW    regD
BCLRREG2REG   1   0    0000 sss1 10DD Dddd   0 0     regD    regD

;*** Bchg
BCHGIMM2MEM   1   0    0000 1000 01DD Dddd   0 0     immedW    indA,indApB,indmAB,indAd16,indAcp,absW,absL
BCHGREG2MEM   1   0    0000 sss1 01DD Dddd   0 0     regD    indA,indApB,indmAB,indAd16,indAcp,absW,absL
BCHGIMM2REG   1   0    0000 1000 01DD Dddd   0 0     immedW    regD
BCHGREG2REG   1   0    0000 sss1 01DD Dddd   0 0     regD    regD

;*** Test and set
TAS2MEM       1   0    0100 1010 11DD Dddd   0 0     none    indA,indApB,indmAB,indAd16,indAcp,absW,absL
TAS2REG       1   0    0100 1010 11DD Dddd   0 0     none    regD

;---------------------------------------------------------------------
;*** Shifting instructions

ASLIMM2REGL   1   0    1110 sss1 1000 0ddd   0 0     immedQ    regD
ASLIMM2REGW   1   0    1110 sss1 0100 0ddd   0 0     immedQ    regD
ASLIMM2REGB   1   0    1110 sss1 0000 0ddd   0 0     immedQ    regD

ASLREG2REGL   1   0    1110 sss1 1010 0ddd   0 0     regD    regD
ASLREG2REGW   1   0    1110 sss1 0110 0ddd   0 0     regD    regD
ASLREG2REGB   1   0    1110 sss1 0010 0ddd   0 0     regD    regD

ASLMEMW       0   0    1110 0001 11DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL

ASRIMM2REGL   1   0    1110 sss0 1000 0ddd   0 0     immedQ    regD
ASRIMM2REGW   1   0    1110 sss0 0100 0ddd   0 0     immedQ    regD
ASRIMM2REGB   1   0    1110 sss0 0000 0ddd   0 0     immedQ    regD

ASRREG2REGL   1   0    1110 sss0 1010 0ddd   0 0     regD    regD
ASRREG2REGW   1   0    1110 sss0 0110 0ddd   0 0     regD    regD
ASRREG2REGB   1   0    1110 sss0 0010 0ddd   0 0     regD    regD

ASRMEMW       0   0    1110 0000 11DD Dddd   0 0        none    indA,indApW,indmAW,indAd16,indAcp,absW,absL

LSLIMM2REGL   1   0    1110 sss1 1000 1ddd   0 0     immedQ    regD
LSLIMM2REGW   1   0    1110 sss1 0100 1ddd   0 0     immedQ    regD
LSLIMM2REGB   1   0    1110 sss1 0000 1ddd   0 0     immedQ    regD

LSLREG2REGL   1   0    1110 sss1 1010 1ddd   0 0     regD    regD
LSLREG2REGW   1   0    1110 sss1 0110 1ddd   0 0     regD    regD
LSLREG2REGB   1   0    1110 sss1 0010 1ddd   0 0     regD    regD

LSLMEMW       0   0    1110 0011 11DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL

LSRIMM2REGL   1   0    1110 sss0 1000 1ddd   0 0     immedQ    regD
LSRIMM2REGW   1   0    1110 sss0 0100 1ddd   0 0     immedQ    regD
LSRIMM2REGB   1   0    1110 sss0 0000 1ddd   0 0     immedQ    regD

LSRREG2REGL   1   0    1110 sss0 1010 1ddd   0 0     regD    regD
LSRREG2REGW   1   0    1110 sss0 0110 1ddd   0 0     regD    regD
LSRREG2REGB   1   0    1110 sss0 0010 1ddd   0 0     regD    regD

LSRMEMW       0   0    1110 0010 11DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL

ROLIMM2REGL   1   0    1110 sss1 1001 1ddd   0 0     immedQ    regD
ROLIMM2REGW   1   0    1110 sss1 0101 1ddd   0 0     immedQ    regD
ROLIMM2REGB   1   0    1110 sss1 0001 1ddd   0 0     immedQ    regD

ROLREG2REGL   1   0    1110 sss1 1011 1ddd   0 0     regD    regD
ROLREG2REGW   1   0    1110 sss1 0111 1ddd   0 0     regD    regD
ROLREG2REGB   1   0    1110 sss1 0011 1ddd   0 0     regD    regD

ROLMEMW       0   0    1110 0111 11DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL

ROXLIMM2REGL  0   0    1110 sss1 1001 0ddd   0 0     immedQ    regD
ROXLIMM2REGW  0   0    1110 sss1 0101 0ddd   0 0     immedQ    regD
ROXLIMM2REGB  0   0    1110 sss1 0001 0ddd   0 0     immedQ    regD

ROXLREG2REGL  0   0    1110 sss1 1011 0ddd   0 0     regD    regD
ROXLREG2REGW  0   0    1110 sss1 0111 0ddd   0 0     regD    regD
ROXLREG2REGB  0   0    1110 sss1 0011 0ddd   0 0     regD    regD

ROXLMEMW      0   0    1110 0101 11DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL

RORIMM2REGL   1   0    1110 sss0 1001 1ddd   0 0     immedQ    regD
RORIMM2REGW   1   0    1110 sss0 0101 1ddd   0 0     immedQ    regD
RORIMM2REGB   1   0    1110 sss0 0001 1ddd   0 0     immedQ    regD

RORREG2REGL   1   0    1110 sss0 1011 1ddd   0 0     regD    regD
RORREG2REGW   1   0    1110 sss0 0111 1ddd   0 0     regD    regD
RORREG2REGB   1   0    1110 sss0 0011 1ddd   0 0     regD    regD

RORMEMW       0   0    1110 0110 11DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL

ROXRIMM2REGL  0   0    1110 sss0 1001 0ddd   0 0     immedQ    regD
ROXRIMM2REGW  0   0    1110 sss0 0101 0ddd   0 0     immedQ    regD
ROXRIMM2REGB  0   0    1110 sss0 0001 0ddd   0 0     immedQ    regD

ROXRREG2REGL  0   0    1110 sss0 1011 0ddd   0 0     regD    regD
ROXRREG2REGW  0   0    1110 sss0 0111 0ddd   0 0     regD    regD
ROXRREG2REGB  0   0    1110 sss0 0011 0ddd   0 0     regD    regD

ROXRMEMW      0   0    1110 0100 11DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL

;---------------------------------------------------------------------
;*** Comparing instructions
;*** CMP
CMPMEM2REGL   1   0    1011 ddd0 10SS Ssss   0 0     indA,indApL,indmAL,indPCd16,indAd16,indAcp,indPCcp,absW,absL    regD
CMPMEM2REGW   1   0    1011 ddd0 01SS Ssss   0 0     indA,indApW,indmAW,indPCd16,indAd16,indAcp,indPCcp,absW,absL    regD
CMPMEM2REGB   1   0    1011 ddd0 00SS Ssss   0 0     indA,indApB,indmAB,indPCd16,indAd16,indAcp,indPCcp,absW,absL    regD

CMPREG2REGL   1   0    1011 ddd0 10SS Ssss   0 0     regD,regA    regD
CMPREG2REGW   1   0    1011 ddd0 01SS Ssss   0 0     regD,regA    regD
CMPREG2REGB   1   0    1011 ddd0 00SS Ssss   0 0     regD    regD

;*** CMPM
CMPMEM2MEML   1   0    1011 ddd1 1000 1sss   0 0     indApL    indApL
CMPMEM2MEMW   1   0    1011 ddd1 0100 1sss   0 0     indApW    indApW
CMPMEM2MEMB   1   0    1011 ddd1 0000 1sss   0 0     indApB    indApB

;*** CMPA
CMPAMEM2REGL  1   0    1011 ddd1 11SS Ssss   0 0     indA,indApL,indmAL,indPCd16,indAd16,indAcp,indPCcp,absW,absL    regA
CMPAMEM2REGW  1   0    1011 ddd0 11SS Ssss   0 0     indA,indApW,indmAW,indPCd16,indAd16,indAcp,indPCcp,absW,absL    regA

;CMPA.L reg,Ax is the same implementation as CMP.L reg,Dx
CMPREG2REGL   1   0    1011 ddd1 11SS Ssss   0 0     regD,regA    regA
CMPAREG2REGW  1   0    1011 ddd0 11SS Ssss   0 0     regD,regA    regA

CMPIMM2REGL   1   0    1011 ddd1 11SS Ssss   0 0     immedL    regA
CMPAIMM2REGW  1   0    1011 ddd0 11SS Ssss   0 0     immedW    regA

;*** CMPI
CMPIMM2REGL   1   0    0000 1100 10DD Dddd   0 0     immedL    regD
CMPIMM2REGW   1   0    0000 1100 01DD Dddd   0 0     immedW    regD
CMPIMM2REGB   1   0    0000 1100 00DD Dddd   0 0     immedB    regD

CMPIMM2MEML   1   0    0000 1100 10DD Dddd   0 0     immedL    indA,indApL,indmAL,indAd16,indAcp,indPCcp,absW,absL
CMPIMM2MEMW   1   0    0000 1100 01DD Dddd   0 0     immedW    indA,indApW,indmAW,indAd16,indAcp,indPCcp,absW,absL
CMPIMM2MEMB   1   0    0000 1100 00DD Dddd   0 0     immedB    indA,indApB,indmAB,indAd16,indAcp,indPCcp,absW,absL

CMPIMM2REGL   1   0    1011 ddd0 10SS Ssss   0 0     immedL    regD
CMPIMM2REGW   1   0    1011 ddd0 01SS Ssss   0 0     immedW    regD
CMPIMM2REGB   1   0    1011 ddd0 00SS Ssss   0 0     immedB    regD

;*** CMP2
CMP2MEM2REGL  0   1    0000 0100 11SS Ssss   0 0     indA,indPCd16,indAd16,indAcp,indPCcp,absW,absL    none
CMP2MEM2REGW  0   1    0000 0010 11SS Ssss   0 0     indA,indPCd16,indAd16,indAcp,indPCcp,absW,absL    none
CMP2MEM2REGB  0   1    0000 0000 11SS Ssss   0 0     indA,indPCd16,indAd16,indAcp,indPCcp,absW,absL    none

;---------------------------------------------------------------------
;*** Arithmetic instructions
;*** Addition
;*** ADD
ADDREG2MEML   1   0    1101 sss1 10DD Dddd   0 0     regD    indA,indApL,indmAL,indAd16,indAcp,absW,absL
ADDREG2MEMW   1   0    1101 sss1 01DD Dddd   0 0     regD    indA,indApW,indmAW,indAd16,indAcp,absW,absL
ADDREG2MEMB   1   0    1101 sss1 00DD Dddd   0 0     regD    indA,indApB,indmAB,indAd16,indAcp,absW,absL

ADDMEM2REGL   1   0    1101 ddd0 10SS Ssss   0 0     indA,indApL,indmAL,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD
ADDMEM2REGW   1   0    1101 ddd0 01SS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD
ADDMEM2REGB   1   0    1101 ddd0 00SS Ssss   0 0     indA,indApB,indmAB,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD

ADDREG2REGL   1   0    1101 ddd0 10SS Ssss   0 0     regD,regA    regD
ADDREG2REGW   1   0    1101 ddd0 01SS Ssss   0 0     regD,regA    regD
ADDREG2REGB   1   0    1101 ddd0 00SS Ssss   0 0     regD    regD

;*** ADDI
ADDIMM2MEML   1   0    0000 0110 10DD Dddd   0 0     immedL    indA,indApL,indmAL,indAd16,indAcp,absW,absL
ADDIMM2MEMW   1   0    0000 0110 01DD Dddd   0 0     immedW    indA,indApW,indmAW,indAd16,indAcp,absW,absL
ADDIMM2MEMB   1   0    0000 0110 00DD Dddd   0 0     immedB    indA,indApB,indmAB,indAd16,indAcp,absW,absL

ADDIMM2REGL   1   0    0000 0110 10DD Dddd   0 0     immedL    regD
ADDIMM2REGW   1   0    0000 0110 01DD Dddd   0 0     immedW    regD
ADDIMM2REGB   1   0    0000 0110 00DD Dddd   0 0     immedB    regD

;ADD #imm,dx
ADDIMM2REGL   1   0    1101 ddd0 10SS Ssss   0 0     immedL    regD
ADDIMM2REGW   1   0    1101 ddd0 01SS Ssss   0 0     immedW    regD
ADDIMM2REGB   1   0    1101 ddd0 00SS Ssss   0 0     immedB    regD

;*** ADDQ
ADDQ2REGL     1   0    0101 sss0 10DD Dddd   0 0     immedQ    regD
ADDQ2REGW     1   0    0101 sss0 01DD Dddd   0 0     immedQ    regD
ADDQ2REGB     1   0    0101 sss0 00DD Dddd   0 0     immedQ    regD

;If the target is an address register, then flags kept unchanged
ADDAQ2REGL    1   0    0101 sss0 10DD Dddd   0 0     immedQ    regA

;Address registers are always longword-sized, doesn't matter what is the specified size,
;immediate word sized data will be sign-extended to longword
ADDAQ2REGL    1   0    0101 sss0 01DD Dddd   0 0     immedQ    regA

ADDQ2MEML     1   0    0101 sss0 10DD Dddd   0 0     immedQ    indA,indApL,indmAL,indAd16,indAcp,absW,absL
ADDQ2MEMW     1   0    0101 sss0 01DD Dddd   0 0     immedQ    indA,indApW,indmAW,indAd16,indAcp,absW,absL
ADDQ2MEMB     1   0    0101 sss0 00DD Dddd   0 0     immedQ    indA,indApB,indmAB,indAd16,indAcp,absW,absL

;*** ADDA
;If the target is an address register, then flags kept unchanged
ADDAMEM2REGL  1   0    1101 ddd1 11SS Ssss   0 0     indA,indApL,indmAL,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regA

;Address registers are always longword-sized, doesn't matter what is the specified size,
;word sized data will be sign-extended to longword before the operation
ADDAMEM2REGW  1   0    1101 ddd0 11SS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regA
ADDAREG2REGL  1   0    1101 ddd1 11SS Ssss   0 0     regA,regD    regA
ADDAREG2REGW  1   0    1101 ddd0 11SS Ssss   0 0     regA,regD    regA
ADDAIMM2REGL  1   0    1101 ddd1 11SS Ssss   0 0     immedL    regA
ADDAIMM2REGW  1   0    1101 ddd0 11SS Ssss   0 0     immedW    regA

;*** ADDX
ADDXREG2REGL  1   0    1101 ddd1 1000 0sss   0 0     regD    regD
ADDXREG2REGW  1   0    1101 ddd1 0100 0sss   0 0     regD    regD
ADDXREG2REGB  1   0    1101 ddd1 0000 0sss   0 0     regD    regD

ADDXMEM2MEML  1   0    1101 ddd1 1000 1sss   0 0     indmAL    indmAL
ADDXMEM2MEMW  1   0    1101 ddd1 0100 1sss   0 0     indmAW    indmAW
ADDXMEM2MEMB  1   0    1101 ddd1 0000 1sss   0 0     indmAB    indmAB

;*** Substraction
;*** SUB
SUBREG2MEML   1   0    1001 sss1 10DD Dddd   0 0     regD    indA,indApL,indmAL,indAd16,indAcp,absW,absL
SUBREG2MEMW   1   0    1001 sss1 01DD Dddd   0 0     regD    indA,indApW,indmAW,indAd16,indAcp,absW,absL
SUBREG2MEMB   1   0    1001 sss1 00DD Dddd   0 0     regD    indA,indApB,indmAB,indAd16,indAcp,absW,absL

SUBMEM2REGL   1   0    1001 ddd0 10SS Ssss   0 0     indA,indApL,indmAL,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD
SUBMEM2REGW   1   0    1001 ddd0 01SS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD
SUBMEM2REGB   1   0    1001 ddd0 00SS Ssss   0 0     indA,indApB,indmAB,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD

SUBREG2REGL   1   0    1001 ddd0 10SS Ssss   0 0     regA,regD    regD
SUBREG2REGW   1   0    1001 ddd0 01SS Ssss   0 0     regA,regD    regD
SUBREG2REGB   1   0    1001 ddd0 00SS Ssss   0 0     regD    regD

;*** SUBI
SUBIMM2MEML   1   0    0000 0100 10DD Dddd   0 0     immedL    indA,indApL,indmAL,indAd16,indAcp,absW,absL
SUBIMM2MEMW   1   0    0000 0100 01DD Dddd   0 0     immedW    indA,indApW,indmAW,indAd16,indAcp,absW,absL
SUBIMM2MEMB   1   0    0000 0100 00DD Dddd   0 0     immedB    indA,indApB,indmAB,indAd16,indAcp,absW,absL

SUBIMM2REGL   1   0    0000 0100 10DD Dddd   0 0     immedL    regD
SUBIMM2REGW   1   0    0000 0100 01DD Dddd   0 0     immedW    regD
SUBIMM2REGB   1   0    0000 0100 00DD Dddd   0 0     immedB    regD

SUBIMM2REGL   1   0    1001 ddd0 10SS Ssss   0 0     immedL    regD
SUBIMM2REGW   1   0    1001 ddd0 01SS Ssss   0 0     immedW    regD
SUBIMM2REGB   1   0    1001 ddd0 00SS Ssss   0 0     immedB    regD

;*** SUBQ
SUBQ2REGL     1   0    0101 sss1 10DD Dddd   0 0     immedQ    regD
SUBQ2REGW     1   0    0101 sss1 01DD Dddd   0 0     immedQ    regD
SUBQ2REGB     1   0    0101 sss1 00DD Dddd   0 0     immedQ    regD

;If the target is an address register, then flags kept unchanged
SUBAQ2REGL    1   0    0101 sss1 10DD Dddd   0 0     immedQ    regA

;Address registers are always longword-sized, doesn't matter what is the specified size,
;word sized data will be sign-extended to longword before the operation
SUBAQ2REGL    1   0    0101 sss1 01DD Dddd   0 0     immedQ    regA

SUBQ2MEML     1   0    0101 sss1 10DD Dddd   0 0     immedQ    indA,indApL,indmAL,indAd16,indAcp,absW,absL
SUBQ2MEMW     1   0    0101 sss1 01DD Dddd   0 0     immedQ    indA,indApW,indmAW,indAd16,indAcp,absW,absL
SUBQ2MEMB     1   0    0101 sss1 00DD Dddd   0 0     immedQ    indA,indApB,indmAB,indAd16,indAcp,absW,absL

;*** SUBA
;If the target is an address register, then flags kept unchanged
SUBAMEM2REGL  1   0    1001 ddd1 11SS Ssss   0 0     indA,indApL,indmAL,indPCd16,indAd16,indAcp,indPCcp,absW,absL    regA

;Address registers are always longword-sized, doesn't matter what is the specified size,
;word sized data will be sign-extended to longword before the operation
SUBAMEM2REGW  1   0    1001 ddd0 11SS Ssss   0 0     indA,indApW,indmAW,indPCd16,indAd16,indAcp,indPCcp,absW,absL    regA
SUBAIMM2REGL  1   0    1001 ddd1 11SS Ssss   0 0     immedL    regA
SUBAIMM2REGW  1   0    1001 ddd0 11SS Ssss   0 0     immedW    regA
SUBAREG2REGL  1   0    1001 ddd1 11SS Ssss   0 0     regA,regD    regA
SUBAREG2REGW  1   0    1001 ddd0 11SS Ssss   0 0     regA,regD    regA

;*** SUBX
SUBXREG2REGL  1   0    1001 ddd1 1000 0sss   0 0     regD    regD
SUBXREG2REGW  1   0    1001 ddd1 0100 0sss   0 0     regD    regD
SUBXREG2REGB  1   0    1001 ddd1 0000 0sss   0 0     regD    regD

SUBXMEM2MEML  1   0    1001 ddd1 1000 1sss   0 0     indmAL    indmAL
SUBXMEM2MEMW  1   0    1001 ddd1 0100 1sss   0 0     indmAW    indmAW
SUBXMEM2MEMB  1   0    1001 ddd1 0000 1sss   0 0     indmAB    indmAB

;*** MULS.W
MULSIMM2REGW  1   0    1100 ddd1 11SS Ssss   0 0     immedW    regD
MULSREG2REGW  1   0    1100 ddd1 11SS Ssss   0 0     regD    regD
MULSMEM2REGW  1   0    1100 ddd1 11SS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD

;*** MULU.W
MULUIMM2REGW  1   0    1100 ddd0 11SS Ssss   0 0     immedW    regD
MULUREG2REGW  1   0    1100 ddd0 11SS Ssss   0 0     regD    regD
MULUMEM2REGW  1   0    1100 ddd0 11SS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD

;*** MULU.L/MULS.L
MULIMM2REGL   0   3    0100 1100 0011 1100   0 0     none    none
MULREG2REGL   0   1    0100 1100 00SS Ssss   0 0     regD    none
MULMEM2REGL   0   1    0100 1100 00SS Ssss   0 0     indA,indApL,indmAL,indAd16,indAcp,indPCcp,indPCd16,absW,absL    none

;*** DIVS.W
DIVSIMM2REGW  0   0    1000 ddd1 11SS Ssss   0 0     immedW    regD
DIVSREG2REGW  0   0    1000 ddd1 11SS Ssss   0 0     regD    regD
DIVSMEM2REGW  0   0    1000 ddd1 11SS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD

;*** DIVU.W
DIVUIMM2REGW  0   0    1000 ddd0 11SS Ssss   0 0     immedW    regD
DIVUREG2REGW  0   0    1000 ddd0 11SS Ssss   0 0     regD    regD
DIVUMEM2REGW  0   0    1000 ddd0 11SS Ssss   0 0     indA,indApW,indmAW,indAd16,indAcp,indPCcp,indPCd16,absW,absL    regD

;*** DIVU.L/DIVS.L
DIVIMM2REGL   0   3    0100 1100 0111 1100   0 0     none    none
DIVREG2REGL   0   1    0100 1100 01SS Ssss   0 0     regD    none
DIVMEM2REGL   0   1    0100 1100 01SS Ssss   0 0     indA,indApL,indmAL,indAd16,indAcp,indPCcp,indPCd16,absW,absL    none

;*** NEG
NEGREGL       1   0    0100 0100 10DD Dddd   0 0     none    regD
NEGREGW       1   0    0100 0100 01DD Dddd   0 0     none    regD
NEGREGB       1   0    0100 0100 00DD Dddd   0 0     none    regD

NEGMEML       1   0    0100 0100 10DD Dddd   0 0     none    indA,indApL,indmAL,indAd16,indAcp,absW,absL
NEGMEMW       1   0    0100 0100 01DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL
NEGMEMB       1   0    0100 0100 00DD Dddd   0 0     none    indA,indApB,indmAB,indAd16,indAcp,absW,absL

;*** NEGX
NEGXREGL      1   0    0100 0000 10DD Dddd   0 0     none    regD
NEGXREGW      1   0    0100 0000 01DD Dddd   0 0     none    regD
NEGXREGB      1   0    0100 0000 00DD Dddd   0 0     none    regD

NEGXMEML      1   0    0100 0000 10DD Dddd   0 0     none    indA,indApL,indmAL,indAd16,indAcp,absW,absL
NEGXMEMW      1   0    0100 0000 01DD Dddd   0 0     none    indA,indApW,indmAW,indAd16,indAcp,absW,absL
NEGXMEMB      1   0    0100 0000 00DD Dddd   0 0     none    indA,indApB,indmAB,indAd16,indAcp,absW,absL

;*** Decimal arithmetics
ABCDREG2REGB  0   0    1100 ddd1 0000 0sss   0 0     regD    regD
ABCDMEM2MEMB  0   0    1100 ddd1 0000 1sss   0 0     indmAB    indmAB

SBCDREG2REGB  0   0    1000 ddd1 0000 0sss   0 0     regD    regD
SBCDMEM2MEMB  0   0    1000 ddd1 0000 1sss   0 0     indmAB    indmAB

NBCDREGB      0   0    0100 1000 00DD Dddd   0 0     none    regD
NBCDMEMB      0   0    0100 1000 00DD Dddd   0 0     none    indA,indApB,indmAB,indAd16,indAcp,absW,absL
PACKREG2REGB  0   1    1000 ddd1 0100 0sss   0 0     regD    regD
PACKMEM2MEMB  0   1    1000 ddd1 0100 1sss   0 0     indmAW    indmAB
UNPKREG2REGB  0   1    1000 ddd1 1000 0sss   0 0     regD    regD
UNPKMEM2MEMB  0   1    1000 ddd1 1000 1sss   0 0     indmAB    indmAW

;---------------------------------------------------------------------
;*** Misc instructions
;*** Swap
SWAP          1   0    0100 1000 0100 0ddd   0 0     none    regD

;*** Exchange
EXGD          1   0    1100 sss1 0100 0ddd   0 0     regD    regD
EXGA          1   0    1100 sss1 0100 1ddd   0 0     regA    regA
EXGD          1   0    1100 sss1 1000 1ddd   0 0     regD    regA

;*** EXT
EXTBW         1   0    0100 1000 1000 0ddd   0 0     none    regD
EXTWL         1   0    0100 1000 1100 0ddd   0 0     none    regD
EXTBL         1   0    0100 1001 1100 0ddd   0 0     none    regD

;*** Other
NOP           1   0    0100 1110 0111 0001   0 0     none    none

;*** Testing
TSTREGL       1   0    0100 1010 10SS Ssss   0 0     regD,regA    none
TSTREGW       1   0    0100 1010 01SS Ssss   0 0     regD,regA    none
TSTREGB       1   0    0100 1010 00SS Ssss   0 0     regD    none

TSTMEML       1   0    0100 1010 10SS Ssss   0 0     indA,indApL,indmAL,indPCd16,indAd16,indAcp,indPCcp,absW,absL    none
TSTMEMW       1   0    0100 1010 01SS Ssss   0 0     indA,indApW,indmAW,indPCd16,indAd16,indAcp,indPCcp,absW,absL    none
TSTMEMB       1   0    0100 1010 00SS Ssss   0 0     indA,indApB,indmAB,indPCd16,indAd16,indAcp,indPCcp,absW,absL    none

;*** Link - unlink
LINKW         1   0    0100 1110 0101 0ddd   0 0     immedW    regA
LINKL         1   0    0100 1000 0000 1ddd   0 0     immedL    regA
UNLINK        1   0    0100 1110 0101 1sss   0 0     regA    none

;---------------------------------------------------------------------
;*** Bitfield instructions
BFCHG2REG     0   1    1110 1010 11DD Dddd   0 0     none     regD
BFCHG2MEM     0   1    1110 1010 11DD Dddd   0 0     none     indA,indAd16,indAcp,absW,absL
BFCLR2REG     0   1    1110 1100 11DD Dddd   0 0     none     regD
BFCLR2MEM     0   1    1110 1100 11DD Dddd   0 0     none     indA,indAd16,indAcp,absW,absL
BFEXTS2REG    0   1    1110 1011 11DD Dddd   0 0     none     regD
BFEXTS2MEM    0   1    1110 1011 11DD Dddd   0 0     none     indA,indAd16,indAcp,indPCd16,indPCcp,absW,absL
BFEXTU2REG    0   1    1110 1001 11DD Dddd   0 0     none     regD
BFEXTU2MEM    0   1    1110 1001 11DD Dddd   0 0     none     indA,indAd16,indAcp,indPCd16,indPCcp,absW,absL
BFFFO2REG     0   1    1110 1101 11DD Dddd   0 0     none     regD
BFFFO2MEM     0   1    1110 1101 11DD Dddd   0 0     none     indA,indAd16,indAcp,indPCd16,indPCcp,absW,absL
BFINS2REG     0   1    1110 1111 11DD Dddd   0 0     none     regD
BFINS2MEM     0   1    1110 1111 11DD Dddd   0 0     none     indA,indAd16,indAcp,absW,absL
BFSET2REG     0   1    1110 1110 11DD Dddd   0 0     none     regD
BFSET2MEM     0   1    1110 1110 11DD Dddd   0 0     none     indA,indAd16,indAcp,absW,absL
BFTST2REG     0   1    1110 1000 11DD Dddd   0 0     none     regD
BFTST2MEM     0   1    1110 1000 11DD Dddd   0 0     none     indA,indAd16,indAcp,indPCd16,indPCcp,absW,absL

;---------------------------------------------------------------------
;*** Basic FPU instructions
;cpBcc
FBCONDW       0   0    1111 0010 10SS Ssss   1 0     FCC_eq,FCC_ogt,FCC_oge,FCC_olt,FCC_ole,FCC_ogl,FCC_or,FCC_un,FCC_ueq,FCC_ugt,FCC_uge,FCC_ult,FCC_ule,FCC_ne,FCC_t,FCC_sf,FCC_seq,FCC_gt,FCC_ge,FCC_lt,FCC_le,FCC_gl,FCC_gle,FCC_ngle,FCC_ngl,FCC_nle,FCC_nlt,FCC_nge,FCC_ngt,FCC_sne,FCC_st    none
FBCONDL       0   0    1111 0010 11SS Ssss   1 0     FCC_f,FCC_eq,FCC_ogt,FCC_oge,FCC_olt,FCC_ole,FCC_ogl,FCC_or,FCC_un,FCC_ueq,FCC_ugt,FCC_uge,FCC_ult,FCC_ule,FCC_ne,FCC_t,FCC_sf,FCC_seq,FCC_gt,FCC_ge,FCC_lt,FCC_le,FCC_gl,FCC_gle,FCC_ngle,FCC_ngl,FCC_nle,FCC_nlt,FCC_nge,FCC_ngt,FCC_sne,FCC_st    none

;cpBDcc
FDBCOND       0   0    1111 0010 0100 1ddd   1 0     none    regD

;cpGEN
FGENREG       0   1    1111 0010 00SS Ssss   0 0     regD,regA    none
FGENMEM       0   1    1111 0010 00SS Ssss   0 0     indA,indAd16,indPCd16,absW,absL,indAcp,indPCcp    none

;cpGEN -(Ax)
FGENMEMUM     0   1    1111 0010 0010 0sss   0 0     regA    none

;cpGEN (Ax)+
FGENMEMUP     0   1    1111 0010 0001 1sss   0 0     regA    none

;cpGEN #x
FGENIMM       0   1    1111 0010 0011 1100   0 0     none    none

;cpSAVE
FSAVEMEM      0   0    1111 0011 00DD Dddd   0 0     none    indA,indAd16,indPCd16,absW,absL,indAcp

;cpSAVE -(Ax)
FSAVEMEMUM    0   0    1111 0011 0010 0ddd   0 0     none    regA

;cpRESTORE
FRESTOREMEM   0   0    1111 0011 01SS Ssss   0 0     indA,indAd16,indPCd16,absW,absL,indAcp,indPCcp    none

;cpRESTORE (Ax)+
FRESTOREMEMUP 0   0    1111 0011 0101 1sss   0 0    regA    none

;cpScc
FSCCREGB      0   1    1111 0010 01DD Dddd   0 0     none    regD
FSCCMEMB      0   1    1111 0010 01DD Dddd   0 0     none    indA,indAd16,indPCd16,absW,absL,indAcp,indApB,indmAB

;FNOP
FNOP          0   1    1111 0010 1000 0000   0 0     none    none

;*** EOF
