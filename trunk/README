E-UAE PowerPC JIT project 0.8.29-PPCJITBETA02
=============================================

This project is a fork of the E-UAE Amiga emulation project. You can find the
original project's pages here:

http://www.rcdrummond.net/uae

Please also read the details of the original project in the included
README_original file.

The goal of the project is implementing Just-In-Time compiling for PowerPC
processors, using (some of) the already available intel x86 implementation.

For further details please have a look on the project blog:

http://euaejit.blogspot.com


You can find the actual project sources in the SourceForge project:

https://sourceforge.net/projects/euaeppcjit


If you would like to support the project then please consider a small donation:

http://amigabounty.net/index.php?function=viewproject&projectid=35

Thank you!


Beta release #2 (PPCJITBETA02)
===================================
After the initial beta release here comes a more complete and significantly
improved version of the JIT compiler.

This release also includes new features, like SAM440EP/Flex support and
CGX overlay support for MorphOS.

Lots of various bugs were fixed in this release, hopefully it is more stable
and more usable on the various supported platforms. Yet there is a big chunk of
outstanding work to be done, you can find more details about the missing pieces
by looking at the tickets in the SourceForge repository:

https://sourceforge.net/p/euaeppcjit/tickets

Please read the How to test and the Known issues sections carefully before
you start using the release.

You can also find a comparison of the original E-UAE v0.8.29 and this version
in the What is the difference section.

Please note: the tools for the emulator are not included in this beta package.
If you need these tools (for example: mousehack, make-hdf, rtg.library, etc.)
then please use them from a previous E-UAE release.
This emulator is backward compatible with the original v0.8.29, you can use
the same tools or even the same configuration files with some JIT compiling-
related changes.


Files in this package
=====================
You can find the following directories and files in the package:

  docs       - documentation from the original E-UAE sources with adjustments
  COPYING    - license document
  README     - this file what you are reading now
  README_original - original README file that came with v0.8.29
  uae        - Generic E-UAE executable compiled for running in an Amiga window


What is the difference
======================
Here are the differences between the original v0.8.29 and this version:

* Some minor fixes were applied on certain files when it was necessary.

* The x86 JIT compiling were removed completely.

* The PowerPC JIT compiling were implemented from scratch, some support 
  functions were reused from the x86 implementation.
  
* New configuration items are available for the new JIT implementation.
  (See docs/configuration.txt.)
  
* CyberGraphX overlay screen support (for MorphOS only at the moment)
  
* Some configuration items for JIT were removed.
  (See docs/configuration.txt.)

* An indicator LED were introduced for the JIT compiler state.
  (See docs/configuration.txt.)

* Collected the various fixes from different individual forked releases of the
  original E-UAE versions.

* G5 (PowerPC 970/FX/GX/MP) support.
  
All other aspects of the emulation remained the same as it was available
already in E-UAE v0.8.29 (as of 20/08/2008).


Changes since the last release (JITPPCBETA01)
=============================================

New/Changed:
------------
* JIT support for all planned instructions is finised.
  Added the implementation of
   NBCD.B mem, NBCD.B dx, SBCD.B -(Ax),-(Ay), SBCD.B dx,dy, ABCD.B -(Ax),-(Ay),
   ABCD.B dx,dy, UNPK -(Ax),-(Ay),#imm, UNPK dx,dy,#imm, PACK -(Ax),-(Ay),#imm,
   PACK dx,dy,#imm, MULU.L/MULS.L mem,Dx:Dy, MULU.L/MULS.L reg,Dx:Dy,
   MULU.L/MULS.L #imm,Dx:Dy, DIVU(L).L/DIVS(L).L mem,Dx:Dy,
   DIVU(L).L/DIVS(L).L Dx,Dy:Dz, DIVU(L).L/DIVS(L).L #imm,Dx:Dy
  instructions.

* Removed CMP2/CHK2 instruction from the list of the potentially supported
  opcodes and created Ticket#8 for the missing instruction implementation.

* Removed conditional branch hinting, it might cause more trouble than good on
  certain PPC processors.

* Merged changes from Soft3 (Massimiliano Tretene) for supporting SAM440EP and
  SAM440EP-Flex. (Ticket#20)

* Merged Overlay window implementation for MorphOS CGX.
  (See docs/configuration.txt amiga.use_overlay for more details.)

Improved:
--------- 
* Introduced the possibility of preferred temporary register allocation and
  added the preferred registers to the memory read function to avoid register
  swaps on memory write.

Fixed:
------
* Added Mike Blackburn's MacOSX PPC and LinuxPPC fixes.

* Fixed wrong data preparation for ROR.B instructions. (Ticket#5)

* Fixed indAd16 addressing modes: mapped 68k registers were released without
  unmapping when the displacement was zero. (Ticket#6)

* Fixed wrong order of registers in the subtraction for SUBA.W mem,Ax.
  (Ticket#17)

* Fixed trashed LR register when the target address is outside of the 32k range
  and indirect jump is generated. (Ticket #30)

* Fixed warning on released, but not allocated temporary register in the
  MOVEM instructions.

* Fixed warning message for allocated but not released temporary registers.

* Fixed offset masking for PPC branch instructions. Wrong bit masking caused
  jumping to wrong addresses when the conditional branch was prepared with
  negative offset.

* Fixed number of extension words and the source addressing mode for the
  immediate variants of DIV.L and MUL.L instructions.

* Fixed word alignment of the stack pointer (A7) for incrementing and
  decrementing byte-sized addressing modes.

* Removed enable_jit configuration from documentation: this configuration does
  not exist.

* Fixed configure script to take the LIBS and CPPFLAGS variables from command
  line.

* Rolled back changes for TimeDelay macro for AmigaOS4, let's use libamiga
  instead.

* The conflict with the INSERT macro in the MorphOS SDK is workarounded.

* Changed DIV.L and MUL.L instruction macroblock names to avoid confusion with
  the similar word sized instructions.

* Removed duplicate macroblock for and immediate operation.

* Check reference number against the array length for branch scheduling to
  avoid running out of the array.


How to test
===========
First of all: please read the available configuration items in the
docs/configuration.txt file, especially regarding the JIT compiling
configuration.

You can reuse the same configuration files, HD image files, prepared folders
that were already working with the previous E-UAE version.

However, for testing the JIT implementation please make sure you set up
the configuration exactly as listed below:
	cpu_speed=max
	cpu_type=68020 (or 68EC020, 68040, see Known issues)
	cpu_compatible=false
	cpu_cycle_exact=false
	blitter_cycle_exact=false
	comp_optimize=no (see Known issues)
	cachesize=8192 (or higher)
	comp_constjump=yes
	comp_trustbyte=indirect (see Known issues)
	comp_trustword=indirect
	comp_trustlong=indirect

These settings will make sure you get the best performance from the JIT
compiled code and workaround the known issues.

Regarding the processor settings please note: the JIT implementation is
depending on the availibility of the processor cache, any software that turns
the cache off won't be JIT compiled.
Same applies to the processor type: those processors which don't have cache
cannot be used together with the JIT compiling (these are: 68000, 68010).

In case you are not sure whether the JIT compiling works or not with your
configuration: turn on the JIT LED. (See show_leds in docs/configuration.txt.)
If the JIT was set up properly then the JIT LED will blink green on the screen.

For G5 (PowerPC 970/FX/GX/MP) users:
(Applicable to MacOSX and MorphOS only at the moment.)
Please use the binary from the archive which is tagged with "G5": E-UAE_G5 or
uae_G5.
The generic build is running on G5, but it is much slower due to missing
instructions which are emulated by the operating system.


How to report a bug
===================
When you think you have found a bug and would like to report it please make
sure you follow these steps:

1. Check whether the bug was already known. You can find the bug tickets on
   the SourceForge project page: https://sourceforge.net/p/euaeppcjit/tickets

2. Make sure you are using the most recent version of the emulator.
   Check the SourceForge page for any updates:
   https://sourceforge.net/p/euaeppcjit

   You can check the version of your emulator when you start it from command
   line, this will be the very first output from the program.

   The version number includes a tag for the beta releases, for example:
   0.8.29-PPCJITBETA02

3. Make sure the JIT compiling is running, read through the How to test
   section and follow the instructions regarding the configuration.

4. Try to reproduce the bug without JIT compiling: turn off the JIT compiling
   in the configuration and try to reproduce the bug.

5. If you were able to reproduce the bug without JIT compiling then try to
   reproduce it on the previous version of E-UAE.
   If you are able to reproduce it then it is a generic E-UAE bug. Fixing
   these issues is not a goal for the E-UAE PPC JIT project. You might still
   report it, but most likely it won't be fixed in this project.

6. If you think you had found a bug related to the JIT compiling then try to
   make sure you can reproduce the bug consistently (or often enough) and
   please describe the exact details, provide the software that triggers the
   problem.

7. See the Contacts section for getting in touch with me. Gather all the
   information and send it to me by email.


Known issues
============
* The following instructions are planned, but not implemented yet for the
  JIT compiling at the moment:

  - (Ticket#8) compare against bounds instructions (CMP2);

  - (Ticket#10) the FPU instructions were not implemented yet, these are coming
    at a later stage of the project.

  Even though these instructions are not compiled, a fallback mechanism kicks
  in and these will be executed by the interpretive emulation.
  Any software that is relying on these instructions will be still working.

* This is a debug version, so probably it is a little bit slower than the 
  release version will be (including the non-JIT code).
  
* (Ticket#11) E-UAE does not support 68030 processor type, if this processor
  was selected then it falls back to 68010.

* (Ticket#3) A bug in the original E-UAE code prevents enabling of the
  processor cache when the processor type is set to 68060. (In this case the
  JIT compiling won't be enabled.)
  (Ticket#12) As it is stated in the original configuration documentation:
  the 68060 emulation is incomplete, therefore it is not useful yet.

* (Ticket#14) The register/flag flow optimization is not working properly at
  the moment, therefore it should be turned off: comp_optimize=no
  
* (Ticket#15) The direct memory access is not completed yet, theoretically it
  might work for certain software, but I suggest to turn it off by adding these
  lines to the configuration: 
	comp_trustbyte=indirect
	comp_trustword=indirect
	comp_trustlong=indirect

* (Ticket#19) On-screen LEDs are not visible on the Picasso96 RTG screens,
  so the JIT LED indicator is not useful on these screen modes.


Where to get the sources
========================
You can find the current project sources at the SourceForge project pages:

https://sourceforge.net/projects/euaeppcjit


Notes for compiling the sources
===============================
For general notes for compiling please refer to the README_original file.

To compile on Mac OSX 10.3.9 or earlier:

Autoconf2.57 and automake1.6 screw up @OBJCFLAGS@ and is not really compatible. 

Get the previous versions:
http://ftp.gnu.org/gnu/autoconf/autoconf-2.61.tar.bz2
./configure --bindir=/usr/bin --datarootdir=/usr/share 

http://ftp.gnu.org/gnu/automake/automake-1.7.9.tar.bz2
./configure --bindir=/usr/bin --datadir=/usr/share

For Mac OSX 10.4.x and 10.3.x: 
Latest SDL.framework is not properly detected. 
Using the SDL.framework already in E-UAE.app/Content/Frameworks at
http://www.rcdrummond.net/uae
Copy SDL.framework/Headers from the latest SDL.framework and put the framework
in /Library/Frameworks/
./configure --enable-jit --without-x --withsdl-gl --with-cocoa-gui \ 
--with-sdl-prefix=/Library/Frameworks/SDL.framework

For AmigaOS4:
You need to link libamiga to the binary otherwise the TimeDelay macro won't
work. To do so add this parameter to the configure script:
./configure LIBS=-lamiga


Contact
=======
Send any opinion, bug reports, patches, etc. to
Almos Rajnai (almos dot rajnai at GMail)

You can also get in touch with me using the Contact form at the project blog:
http://euaejit.blogspot.com


Special thanks
==============
I would like to thank the support to

  Thunder, kas1e, MickJT, Fab, Tobias Netzel and Mike Blackburn

for helping me with lots of things regarding bug finding, fixing,
platform support and constantly watching out for the updates on the repository.

