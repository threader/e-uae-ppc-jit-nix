dnl Process this file with autoconf to produce a configure script.
dnl Written 1996, 1997, 1998 Bernd Schmidt
dnl
dnl Updated, re-written and generally mauled 2003 Richard Drummond

AC_PREREQ(2.55)
AC_INIT(E-UAE, 0.8.27, ,e-uae)
AC_CONFIG_SRCDIR([config.h])
AC_CONFIG_HEADERS([src/sysconfig.h])
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(1.7 dist-bzip2)

dnl
dnl  Checks for programs.
dnl

dnl This is a hack to stop GCC always adding the -g option to CFLAGS
SAVE_CFLAGS=$CFLAGS
CFLAGS="$CFLAGS -DDUMMY"
AC_PROG_CC
CFLAGS=$SAVE_CFLAGS

AC_PROG_CPP
AC_PROG_CXX
AS_PROG_OBJC
AM_PROG_AS
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_CHECK_TOOL(AR, ar)
AC_PROG_INSTALL
AC_PATH_PROG(MAKEDEPPRG, makedepend, not-found)
AC_PATH_PROG(FILEPRG, file, not-found)
AC_PATH_PROG(WRCPRG, wrc, not-found)
AC_PATH_PROG(RCLPRG, rcl, not-found)

AC_AIX
AC_ISC_POSIX

NR_WARNINGS=0
NR_ERRORS=0

ADDITIONAL_CFLAGS=
OPTIMIZE_CFLAGS=
WARNING_CFLAGS=
DEBUG_CFLAGS=
NO_SCHED_CFLAGS=

dnl
dnl  Checks for libraries.
dnl
dnl Replace main' with a function in -lMedia_s: (Ian!)
dnl AC_CHECK_LIB(Media_s, main, HAVE_MEDIA_LIB=yes, HAVE_MEDIA_LIB=no)
dnl Replace main' with a function in -lNeXT_s:
dnl AC_CHECK_LIB(NeXT_s, main, HAVE_NEXT_LIB=yes, HAVE_NEXT_LIB=no)
dnl AC_CHECK_LIB(moto, cos, HAVE_MOTO_LIB=yes, HAVE_MOTO_LIB=no)
dnl AC_CHECK_LIB(amiga, OpenLibrary, HAVE_AMIGA_LIB=yes, HAVE_AMIGA_LIB=n)
dnl AC_CHECK_LIB(vga, vga_setmode, HAVE_SVGA_LIB=yes, HAVE_SVGA_LIB=no)
dnl AC_CHECK_LIB(ncurses, waddch, HAVE_NCURSES_LIB=yes, HAVE_NCURSES_LIB=no)
dnl AC_CHECK_LIB(posix4, sem_init, HAVE_POSIX4_LIB=yes, HAVE_POSIX4_LIB=no)
dnl AC_CHECK_LIB(rt, sem_init, HAVE_RT_LIB=yes, HAVE_RT_LIB=no)

AC_CHECK_LIB(ossaudio,_oss_ioctl, HAVE_LIBOSSAUDIO=yes, HAVE_LIBOSSAUDIO=no)
AC_CHECK_LIB(AF, AFOpenAudioConn, HAVE_AF_LIB=yes, HAVE_AF_LIB=no)
AC_CHECK_LIB(mme, waveOutGetNumDevs, HAVE_MME_LIB=yes, HAVE_MME_LIB=no)
AC_CHECK_LIB(audio, alOpenPort, HAVE_SGIAUDIO_LIB=yes, HAVE_SGIAUDIO_LIB=no)

AC_PATH_XTRA

AM_PATH_SDL(1.2.0,HAVE_SDL=yes,HAVE_SDL=no)

dnl  Prefer Gtk2.x over Gtk1.x if both are available
AM_PATH_GTK_2_0(2.0.0,HAVE_GTK=yes,HAVE_GTK=no)
if [[ "x$HAVE_GTK" = "xno" ]]; then
  AM_PATH_GTK(1.0.0,HAVE_GTK=yes,HAVE_GTK=no)
fi

dnl
dnl  Checks for header files.
dnl
AC_HEADER_DIRENT
AC_HEADER_STDC

AC_CHECK_HEADERS([fcntl.h sys/ioctl.h sys/time.h utime.h])
AC_CHECK_HEADERS([values.h ncurses.h curses.h sys/termios.h])
AC_CHECK_HEADERS([sys/stat.h sys/ipc.h sys/shm.h sys/mman.h])

dnl AC_CHECK_HEADERS([sys/stat.h sys/vfs.h sys/mount.h sys/param.h])
dnl AC_CHECK_HEADERS([sys/statfs.h sys/statvfs.h sys/fs/s5param.h])
dnl AC_CHECK_HEADERS([sys/filesys.h sys/filsys.h sys/param.h])

AC_CHECK_HEADERS([libraries/cybergraphics.h cybergraphx/cybergraphics.h])

AC_CHECK_HEADERS([devices/ahi.h])
AC_CHECK_HEADERS([sys/soundcard.h machine/soundcard.h sun/audioio.h sys/audioio.h])
AC_CHECK_HEADERS([dmedia/audio.h])

AC_CHECK_HEADERS([machine/joystick.h])

dnl
dnl  Checks for typedefs, structures, and compiler characteristics.
dnl
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_STRUCT_ST_BLOCKS
AC_HEADER_TIME
AC_STRUCT_TM
AC_C_VOLATILE
AC_C_BIGENDIAN

AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(long long, 8)
AC_CHECK_SIZEOF(__int64, 8)

dnl
dnl  Checks for library functions.
dnl
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_UTIME_NULL
AC_CHECK_FUNCS(getcwd getopt strdup gettimeofday sigaction mkdir rmdir)
AC_CHECK_FUNCS(select strerror strstr isnan isinf setitimer alarm sync)
AC_CHECK_FUNCS(tcgetattr cfmakeraw readdir_r vprintf vsprintf vfprintf)
AC_CHECK_FUNCS(strcasecmp stricmp strcmpi)
AC_CHECK_FUNCS(nanosleep usleep sleep)
dnl AC_CHECK_FUNCS(statvfs statfs)
dnl AC_VAR_TIMEZONE_EXTERNALS - broken on *BSD
AC_CHECK_FUNCS(localtime_r timegm gmtime_r)

dnl
dnl  Checks for fsuage
dnl
AC_CHECK_HEADERS(sys/param.h sys/vfs.h sys/fs_types.h)
AC_CHECK_HEADERS(sys/mount.h, [], [],
[#ifdef HAVE_SYS_PARAM_H
# include <sys/param.h>
#endif
])
jm_FILE_SYSTEM_USAGE([gl_cv_fs_space=yes], [gl_cv_fs_space=no])
if test $gl_cv_fs_space = yes; then
  AC_LIBOBJ(fsusage)
  gl_PREREQ_FSUSAGE_EXTRA
fi

AC_CACHE_SAVE

dnl
dnl  Check for libz
dnl
CHECK_ZLIB


dnl
dnl  Check for pthreads
dnl
ACX_PTHREAD(HAVE_PTHREAD=yes,HAVE_PTHREAD=no)



dnl
dnl  Check for dlopen
dnl
SAVE_LIBS="$LIBS"
LIBS="$LIBS -ldl"
AC_CHECK_LIB(dl, dlopen, [
    AC_DEFINE(HAVE_DLOPEN, 1, "Define to 1 if you have 'dlopen' function)
  ], [
    LIBS="$SAVE_LIBS"
  ]
)

dnl
dnl  Check availability of OSS
dnl
HAVE_USS_SOUND=no
if [[ "x$ac_cv_header_sys_soundcard_h" = "xyes" -o "x$ac_cv_header_machine_soundcard_h" = "xyes" ]]; then
  if [[ "x$HAVE_LIBOSSAUDIO" = "xyes" ]]; then
    SAVE_LIBS="$LIBS"
    LIBS="$LIBS -lossaudio"
  fi
  dnl Avoid surprises
  AC_MSG_CHECKING(whether sys/soundcard.h or machine/soundcard.h works)
  AC_TRY_LINK([
#include "confdefs.h"
#ifdef HAVE_SYS_SOUNDCARD_H
#include <sys/soundcard.h>
#else
#include <machine/soundcard.h>
#endif
#include <sys/ioctl.h>
],
[int soundfd; ioctl (soundfd, SNDCTL_DSP_GETFMTS, 0);],
AC_MSG_RESULT(yes)
HAVE_USS_SOUND=yes,
AC_MSG_RESULT(no))
  if [[ "x$HAVE_LIBOSSAUDIO" = "xyes" ]]; then
    LIBS="$SAVE_LIBS"
  fi
fi


dnl
dnl  Check SGI audio
dnl
if [[ "x$ac_cv_header_dmedia_audio.h" = "xno" ]]; then
  HAVE_SGIAUDIO_LIB=no
fi


dnl
dnl  Find out which platform to build for
dnl
AC_MSG_CHECKING([host OS support])

dnl default is generic Unix-like OS
HOST_OS=generic
OSDEP=od-generic

case $host_os in
    linux*)
      HOST_OS=linux
      OSDEP=od-linux
      ;;
    darwin*)
      HOST_OS=darwin
      ;;
    beos)
      HOST_OS=beos
      OSDEP=od-beos
      ;;
    amigaos)
      HOST_OS=amiga
      OSDEP=od-amiga
      ;;
    morphos)
      HOST_OS=morphos
      OSDEP=od-amiga
      ;;
    aros)
      HOST_OS=aros
      OSDEP=od-amiga
      ;;
    mingw32*)
      HOST_OS=win32
      OSDEP=od-win32
esac

AC_MSG_RESULT([$HOST_OS])

dnl
dnl  Find out what CPU arch to build for
dnl
AC_MSG_CHECKING([host cpu support])

dnl default is to use no CPU-specific features
HOST_CPU=generic
MDFPP_H=fpp-unknown.h

case $host_cpu in
     i[[3-6]]86)
       HOST_CPU=i386
       ;;
     powerpc)
       HOST_CPU=ppc
       MDFPP_H=fpp-ieee-be.h
       ;;
     m68k)
       HOST_CPU=68k
       MDFPP_H=fpp-ieee-be.h
       ;;
esac

AC_MSG_RESULT([$HOST_CPU])
MACHDEP="md-$HOST_CPU"

dnl
dnl  Find out what compiler we have
dnl
HAVE_GCC27=no
HAVE_GCC30=no
HAVE_GLIBC2=no

AC_MSG_CHECKING([for GCC 2.7 or higher])
AC_EGREP_CPP(yes,
[#if (__GNUC__ - 1 > 0 && __GNUC_MINOR__ - 1 > 5) || __GNUC__ - 1 > 1
  yes
#endif
], [AC_MSG_RESULT(yes); HAVE_GCC27=yes], AC_MSG_RESULT(no))

if [[ "x$HAVE_GCC27" = "xyes" ]]; then
  AC_MSG_CHECKING([for GCC 3.0 or higher])
  AC_EGREP_CPP(yes,
  [#if __GNUC__ - 1 > 1
    yes
  #endif
  ], [AC_MSG_RESULT(yes); HAVE_GCC30=yes], AC_MSG_RESULT(no))
fi

if test $ac_cv_prog_gcc = yes; then
  if test $HAVE_GCC27 != yes; then
    AC_MSG_WARN([Version 2.7 or better of GCC is recommended])
    NR_WARNINGS=`expr $NR_WARNINGS + 1`
  fi
else
  if test $uae_cv_prog_cc_watcom != yes; then
    AC_MSG_WARN([UAE may not compile and run correctly with your compiler])
    NR_WARNINGS=`expr $NR_WARNINGS + 1`
  fi
fi

if test $ac_cv_prog_gcc = yes; then
  if [[ "$HOST_CPU" = i386 -o "$HOST_CPU" = ppc ]]; then
    MACHDEP="$MACHDEP-gcc"
  fi
fi

dnl
dnl  Now we know the compiler, check some compiler options
dnl
if [[ "x$HAVEGCC27" = "xyes" -a "$HOST_CPU" = "i386" ]]; then
  SAVECFLAGS=$CFLAGS
  CFLAGS="$CFLAGS -mno-schedule-prologue"
  AC_TRY_COMPILE(,int main(){return 0;}, NO_SCHED_CFLAGS="-mno-schedule-prologue")
  CFLAGS=$SAVECFLAGS
fi
if [[ "x$HAVEGCC27" = "xyes" -a "$HOST_CPU" = "i386" ]]; then
  SAVECFLAGS=$CFLAGS
  CFLAGS="$CFLAGS -mpreferred-stack-boundary=2"
  AC_TRY_COMPILE(,int main(){return 0;}, SAVECFLAGS=$CFLAGS)
  CFLAGS=$SAVECFLAGS
fi
dnl If GCC supports exceptions, we don't want them.
dnl
if [[ "x$HAVEGCC27" = "xyes" -a "$HOST_CPU" = "i386" ]]; then
  SAVECFLAGS=$CFLAGS
  CFLAGS="$CFLAGS -fno-exceptions"
  NOEXCEPTIONS=no
  AC_TRY_COMPILE(,int main(){return 0;}, NOEXCEPTIONS=yes)
  if [[ "x$NOEXCEPTIONS" = "xno" ]]; then
    CFLAGS=$SAVECFLAGS
  fi
fi

dnl on OS X, we don't want position-independent code, so
dnl include the option -mdynamic-no-pic.
dnl
if [[ "$HOST_OS" = "darwin" ]]; then
  OPTIMIZE_CFLAGS="$OPTIMIZE_CFLAGS -mdynamic-no-pic"
fi

if [[ "x$ac_cv_header_features_h" = "xyes" ]]; then
  AC_MSG_CHECKING(for glibc-2.0 or higher)
  AC_EGREP_CPP(yes,
[#include <features.h>
#if __GLIBC__ - 1 >= 1
  yes
#endif
], [AC_MSG_RESULT(yes); HAVE_GLIBC2=yes], AC_MSG_RESULT(no))
fi


dnl
dnl  Generic default targets
dnl
TARGET=x11
TARGETDEP=t-unix.h
if [[ "$HAVE_PTHREAD" = "yes" ]]; then
  THREADDEP=td-posix
  THREADNAME=posix
else
  THREADDEP=td-none
  THREADNAME=none
fi
if [[ "x$no_x" != "xyes" ]]; then
  GFX_DEP=gfx-x11
  GFX_NAME=x11
else
  GFX_DEP=
  GXF_NAME=
fi
GUI_DEP=gui-none
GUI_NAME=none
GUI_LIBS=
SND_DEP=sd-none
SND_NAME=none
JOY_DEP=jd-none
JOY_NAME=none

DO_PROFILING=no
if [[ "$HOST_CPU" = "i386" ]]; then
  WANT_JIT=yes
  WANT_X86ASSEMBLY=yes
else
  WANT_JIT=no
  WANT_X86ASSEMBLY=no
fi
NATMEM=no
NOFLAGS=no
WANT_DGA=no
WANT_VIDMODE=no
WANT_THREADS=dunno
NEED_THREAD_SUPPORT=no
WANT_AUTOCONFIG=dunno
WANT_SCSIEMU=no
WANT_AGA=yes
WANT_CD32=dunno
WANT_CDTV=dunno
WANT_BSDSOCK=dunno
WANT_BSDSOCK_NEW=no
WANT_UI=dunno
WANT_AUDIO=dunno
WANT_COMPATIBLE=yes
WANT_CYCLEEXACT=yes
WANT_CAPS=no
WANT_FDI=yes
WANT_ENFORCER=dunno

MATHLIB=-lm
DEBUGOBJS="debug.o"

dnl
dnl  Override defaults for specfic targets
dnl
if [[ "$HOST_OS" = "linux" ]]; then
  JOY_DEP=jd-linuxold
  JOY_NAME="linux"
  if [[ "$HOST_CPU" = "i386" ]]; then
    NATMEM="0x50000000"
  fi
else if [[ "$OSDEP" = "od-beos" ]]; then
  TARGET=beos
  TARGETDEP=t-beos.h
  THREADDEP=td-beos
  THREADNAME="native BeOS"
  GFX_DEP=gfx-beos
  GFX_NAME="native BeOS"
  GFX_LIBS="-lgame"
  GUI_DEP="gui-beos"
  GUI_NAME="native BeOS"
  GUI_LIBS="-lbe -ltracker"
  JOY_DEP=jd-beos
  JOY_NAME="native BeOS"
  JOY_LIBS="-ldevice"
  SND_DEP=sd-beos
  SND_NAME="native BeOS"
  SND_LIBS="-lmedia"
  WANT_X86ASSEMBLY=no
  WANT_BSDSOCK=no
  WANT_BSDSOCK_NEW=no
  MATHLIB=""
  UAE_RSRCFILE="$OSDEP/uae.rsrc"
else if [[ "$OSDEP" = "od-amiga" ]]; then
  TARGET=amiga
  TARGETDEP=t-amiga.h
  THREADDEP=td-amigaos
  THREADNAME="native AmigaOS"
  GFX_DEP=gfx-amigaos
  GFX_NAME="native AmigaOS"
  GUI_DEP=gui-muirexx
  GUI_NAME="MUIRexx"
  SND_DEP=sd-amigaos
  SND_NAME="native AmigaOS/AHI"
  JOY_DEP=jd-amigaos
  JOY_NAME="Amiga lowlevel.library"
  WANT_BSDSOCK=no
  WANT_BSDSOCK_NEW=no
else if [[ "$OSDEP" = "od-win32" ]]; then
  TARGET=win32
  TARGETDEP=t-win32.h
  THREADDEP="$OSDEP"/threaddep
  THREADNAME=Win32
  GFX_DEP="$OSDEP"
  GFX_NAME=Win32
  GUI_DEP="$OSDEP"
  GUI_NAME=Win32
fi
fi
fi
fi

#  dnl - We need automake conditionals to handle
#  resource file processing, etc. for these platforms . . .
AM_CONDITIONAL(TARGET_BEOS,  test x$OSDEP = xod-beos)
AM_CONDITIONAL(TARGET_WIN32, test x$OSDEP = xod-win32)

dnl
dnl  Options
dnl

AC_ARG_ENABLE(profiling,       AS_HELP_STRING([--enable-profiling],       [Build a profiling (SLOW!) version]),                       [DO_PROFILING=$enableval],[])
AC_ARG_ENABLE(aga,             AS_HELP_STRING([--enable-aga],             [Enable AGA chipset emulation (default yes)]),              [WANT_AGA=$enableval],[])
AC_ARG_ENABLE(cdtv,            AS_HELP_STRING([--enable-cdtv],            [Enable CDTV emulation (default no)]),                      [WANT_CDTV=$enableval],[])
AC_ARG_ENABLE(cd32,            AS_HELP_STRING([--enable-cd32],            [Enable CD32 emulation (default no)]),                      [WANT_CD32=$enableval],[])
AC_ARG_ENABLE(cycle-exact-cpu, AS_HELP_STRING([--enable-cycle-exact-cpu], [Enable cycle-exact CPU emulation (default yes)]),          [WANT_CYCLEEXACT=$enableval],[])
AC_ARG_ENABLE(compatible-cpu,  AS_HELP_STRING([--enable-compatible-cpu],  [Enable compatible CPU emulation (default yes)]),           [WANT_COMPATIBLE=$enableval],[])
AC_ARG_ENABLE(jit,             AS_HELP_STRING([--enable-jit],             [Enable JIT compiler (currently x86 only)]),                [WANT_JIT=$enableval],[])
AC_ARG_ENABLE(natmem,          AS_HELP_STRING([--enable-natmem],          [Enable JIT direct memory support (default auto)]),         [NATMEM=$enableval],[])
AC_ARG_ENABLE(noflags,	       AS_HELP_STRING([--enable-noflags],         [Enable noflags support in JIT (default no)]),              [NOFLAGS=$enableval],[])
AC_ARG_ENABLE(x86assembly,     AS_HELP_STRING([--enable-x86assembly],     [Enable x86 assembly optimizations (default auto)]),        [WANT_X86ASSEMBLY=$enableval],[])
AC_ARG_ENABLE(threads,         AS_HELP_STRING([--enable-threads],         [Enable thread support (default auto)]),                    [WANT_THREADS=$enableval],[])
AC_ARG_ENABLE(autoconfig,      AS_HELP_STRING([--enable-autoconfig],      [Enable emulaton of autoconfig devices (default auto)]),    [WANT_AUTOCONFIG=$enableval],[])
AC_ARG_ENABLE(scsi-device,     AS_HELP_STRING([--enable-scsi-device],     [Enable emulaton of SCSI devices (default no)]),            [WANT_SCSIEMU=$enableval],[])
AC_ARG_ENABLE(bsdsock,         AS_HELP_STRING([--enable-bsdsock],         [Enable bsdsocket.library emulation]),                      [WANT_BSDSOCK=$enableval],[])
AC_ARG_ENABLE(bsdsock-new,     AS_HELP_STRING([--enable-bsdsock-new],     [Enable new bsdsocket.library emulation]),                  [WANT_BSDSOCK_NEW=$enableval],[])
AC_ARG_ENABLE(enforcer,	       AS_HELP_STRING([--enable-enforcer],        [Enable ersatz Enforcer support (default auto)]),           [WANT_ENFORCER=$enableval],[])
AC_ARG_ENABLE(action-replay,   AS_HELP_STRING([--enable-action-replay],   [Enable Action Replay cartridge emulation (default yes)]),  [WANT_ACTION_REPLAY=$enableval],[])
AC_ARG_ENABLE(dga,             AS_HELP_STRING([--enable-dga],             [X11 version: Use the DGA extension]),                      [WANT_DGA=$enableval],[])
AC_ARG_ENABLE(vidmode,         AS_HELP_STRING([--enable-vidmode],         [X11 version: Use the XF86VidMode extension]),              [WANT_VIDMODE=$enableval],[])
AC_ARG_ENABLE(ui,              AS_HELP_STRING([--enable-ui],              [Use a user interface if possible (default on)]),           [WANT_UI=$enableval],[])
AC_ARG_ENABLE(audio,	       AS_HELP_STRING([--enable-audio],           [Enable audio output (default auto)]),                      [WANT_AUDIO=$enableval],[])
AC_ARG_ENABLE(fdi,	       AS_HELP_STRING([--enable-fdi],             [Enable FDI support (default yes)]),                        [WANT_FDI=$enableval],[])

AC_ARG_WITH(sdl,
  AS_HELP_STRING([--with-sdl], [Use SDL library for low-level functions]),
  [WANT_SDL=$withval], [])
AC_ARG_WITH(sdl-sound,
  AS_HELP_STRING([--with-sdl-sound], [Use SDL library for sound]),
  [WANT_SDLSND=$withval], [])
AC_ARG_WITH(sdl-gfx,
  AS_HELP_STRING([--with-sdl-gfx], [Use SDL library for graphics]),
  [WANT_SDLGFX=$withval], [])

AC_ARG_WITH(cocoa-gui,
  AS_HELP_STRING([--with-cocoa-gui], [Use Cocoa for GUI on OS X]),
  [WANT_COCOA_UI=$withval], [])

AC_ARG_WITH(libscg-prefix,
  AS_HELP_STRING([--with-libscg-prefix], [Absolute path to where libscg is installed (optional)]),
  [LIBSCG_PREFIX=$withval], [])
AC_ARG_WITH(libscg-includedir,
  AS_HELP_STRING([--with-libscg-includedir], [Absolute path to libscg headers are installed (default LIBSCG_PREFIX/include)]),
  [LIBSCG_INCLUDEDIR=$withval], [])
AC_ARG_WITH(libscg-libdir,
  AS_HELP_STRING([--with-libscg-libdir], [Absolute path to libscg libs are installed (default LIBSCG_PREFIX/lib)]),
  [LIBSCG_LIBDIR=$withval], [])

AC_ARG_WITH(alsa,
  AS_HELP_STRING([--with-alsa], [Use ALSA library for sound]),
  [WANT_ALSA=$withval],[])

dnl
dnl Some simple plausibility tests...
dnl
AC_MSG_CHECKING([configuration options])

if [[ "x$WANT_SDLSND" = "xyes" -o "x$WANT_SDLGFX" = "xyes" ]]; then
  WANT_SDL=yes
fi

if [[ "x$WANT_DGA" = "xyes" -a "x$WANT_SDLGFX" = "xyes" ]]; then
    AC_MSG_WARN([DGA support cannot be enabled for non-X11 targets!])
    NR_ERRORS=`expr $NR_ERRORS + 1`
    WANT_DGA=no
fi

if [[ "x$WANT_DGA" = "xyes" -a "x$no_x" = "xyes" ]]; then
  AC_MSG_WARN([Ignoring --enable-dga, since X was disabled or not found])
  NR_ERRORS=`expr $NR_ERRORS + 1`
  WANT_DGA=no
fi

if [[ "x$WANT_DGA" = "xno" -a "x$WANT_VIDMODE" = "xyes" ]]; then
  AC_MSG_WARN([The XF86VidMode extension can only be used in DGA mode. Disabling it])
  NR_ERRORS=`expr $NR_ERRORS + 1`
  WANT_VIDMODE=no
fi

AC_MSG_RESULT(ok)



if test $ac_cv_prog_gcc = yes; then
  WARNING_CFLAGS="$WARNING_CFLAGS -Wall -Wno-unused -Wno-format -W -Wmissing-prototypes -Wstrict-prototypes"
  OPTIMIZE_CFLAGS="$OPTIMIZE_CFLAGS -O2 -fomit-frame-pointer"
fi

if [[ "x$DO_PROFILING" = "xyes" ]]; then
  if [[ "x$CC" = "xgcc" ]]; then
    OPTIMIZE_CFLAGS="-O"
    DEBUG_CFLAGS="-g -fno-inline -fno-omit-frame-pointer -pg -DUSE_PROFILING"
    LDFLAGS="-pg"
  else
    DO_PROFILING=no
    AC_MSG_WARN([Don't know how to set up profiling for your compiler])
    NR_ERRORS=`expr $NR_ERRORS + 1`
  fi
fi

UAE_CFLAGS="$OPTIMIZE_CFLAGS $DEBUG_CFLAGS $WARNING_CFLAGS"


dnl
dnl  Check CPU emulation options
dnl

dnl  First, work out if we can use the cpuopti phase
USE_CPUOPTI=no

if [[ "x$HAVE_GCC27" = "xyes" -a "x$HAVE_GCC30" = "xno" ]]; then
  if [[ "$HOST_CPU" = "i386" -a "x$WANT_X86ASSEMBLY" = "xyes"  ]]; then
    USE_CPUOPTI=yes
  fi
fi

dnl  Choose name for cpu objects sources depending on whether
dnl  cpuopti is to be used or not
if [[ "x$USE_CPUOPTI" = "xyes" ]]; then
  CPUOBJ_STEM=cpufast_
else
  CPUOBJ_STEM=cpuemu_
fi

dnl  Now configure the CPU emulation proper
ASMOBJS=
UAE_DEFINES="$UAE_DEFINES -DFPUEMU -DCPUEMU_0"
CPUOBJS="$CPUOBJ_STEM""0.o"

if [[ "x$WANT_COMPATIBLE" != "xno" ]]; then
  UAE_DEFINES="$UAE_DEFINES -DCPUEMU_5"
  CPUOBJS="$CPUOBJS $CPUOBJ_STEM""5.o"
fi

if [[ "x$WANT_CYCLEEXACT" != "xno" ]]; then
  UAE_DEFINES="$UAE_DEFINES -DCPUEMU_6"
  CPUOBJS="$CPUOBJS $CPUOBJ_STEM""6.o"
fi


if [[ "x$HAVE_GCC27" = "xyes" -a "$HOST_CPU" = "i386" -a "x$DO_PROFILING" = "xno" ]]; then
  dnl strength-reduce is turned off not because of paranoia, but because it
  dnl actually makes the code worse in some cases on the i386 (generates too
  dnl many registers, which all end up on the stack).
  UAE_CFLAGS="$UAE_CFLAGS -fno-strength-reduce -DREGPARAM=\"__attribute__((regparm(3)))\""
  UAE_DEFINES="$UAE_DEFINES -DUNALIGNED_PROFITABLE"
else if [[ "x$HAVE_GCC27" = "xyes" -a "$HOST_CPU" = "68k" ]]; then
  UAE_CFLAGS="$UAE_CFLAGS -DREGPARAM=\"__attribute__((regparm(4)))\""
  UAE_DEFINES="$UAE_DEFINES -DUNALIGNED_PROFITABLE -DM68K_FLAG_OPT=1 -DSTATIC_INLINE=\"static inline\""
else
  UAE_CFLAGS="$UAE_CFLAGS -DREGPARAM="
fi
fi


dnl
dnl  Check whether to build with optimized CCR flags handling
dnl
if [[ "x$HAVE_GCC27" = "xyes" ]]; then
  if [[ "$HOST_CPU" = "i386" -o "$HOST_CPU" = "ppc" -o "$HOST_CPU" = "68k" ]]; then
    GENCPUOPTS="--optimized-flags"
  fi
fi

dnl
dnl  Check whether to build x86 assembly
dnl
AC_MSG_CHECKING([whether to build x86 assmebly])

if [[ "x$WANT_X86ASSEMBLY" != "xno" -a "x$HAVE_GCC27" = "xyes" -a "$HOST_CPU" = "i386" ]]; then
  UAE_DEFINES="$UAE_DEFINES -DX86_ASSEMBLY"
  ASMOBJS=md-X86.o
  AC_CONFIG_LINKS(src/md-X86.S:src/md-i386-gcc/X86.S)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl X86.S needs to know whether it needs to add underscores to symbols.
dnl This might break some obscure systems which don't have ELF but don't
dnl add underscores either.
if [[ "x$WANT_X86ASSEMBLY" = "xyes" ]]; then
  AC_MSG_CHECKING(whether assembler symbols need an underscore)
  cat >conftest1.S << EOF
        .text
        .globl _symbol
_symbol:
EOF
  cat >conftest2.c << EOF
extern void symbol ();
int main ()
{
symbol ();
}
EOF
  $CC conftest1.S -c -o conftest1.o >/dev/null 2>&1
  $CC conftest2.c -c -o conftest2.o >/dev/null 2>&1
  if $CC conftest1.o conftest2.o -o conftest >/dev/null 2>&1; then
    USE_UNDERSCORE=yes
    UAE_DEFINES="$UAE_DEFINES -DUSE_UNDERSCORE"
  else
    USE_UNDERSCORE=no
  fi
  AC_MSG_RESULT($USE_UNDERSCORE)
  rm -f conftest*
fi


dnl
dnl  Check whether to build JIT
dnl
AC_MSG_CHECKING([whether to build JIT compiler])
JITOBJS=""
if [[ "x$WANT_JIT" != "xno" -a "$HOST_CPU" = "i386" ]]; then
  UAE_DEFINES="$UAE_DEFINES -DJIT"
  if [[ "x$NATMEM" = "xyes" ]]; then
    NATMEM="0x50000000"
  fi
  if [[ "x$NATMEM" != "xno" ]]; then
    UAE_DEFINES="$UAE_DEFINES -DNATMEM_OFFSET=$NATMEM"
  fi
  JITOBJS="compstbl.o compemu.o compemu_support.o compemu_fpp.o"
  if [[ "x$NOFLAGS" != "xno" ]]; then
    JITOBJS="$JITOBJS cpustbl_nf.o"
    JITOBJS="$JITOBJS $CPUOBJ_STEM""nf_0.o"
    if [[ "x$WANT_COMPATIBLE" != "xno" ]]; then
      JITOBJS="$JITOBJS $CPUOBJ_STEM""nf_5.o"
    fi
    if [[ "x$WANT_CYCLEEXACT" != "xno" ]]; then
      JITOBJS="$JITOBJS $CPUOBJ_STEM""nf_6.o"
    fi
  fi
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

AC_CACHE_SAVE

dnl
dnl  Check which graphics target to build
dnl
AC_MSG_CHECKING([for graphics target to build])

dnl  Check whether we actually wanted to use SDL or whether
dnl  we need to use SDL because we couldn't find any other
dnl  graphics support
dnl
if [[ "x$WANT_SDL" = "xyes" -o "x$GFX_DEP" = "x" ]]; then
  if [[ "x$HAVE_SDL" = "xyes" ]]; then
    THREADDEP=td-sdl
    THREADNAME=SDL
    JOY_DEP=jd-sdl
    JOY_NAME=SDL
    GFX_LIBS="$SDL_LIBS"
    GFX_CFLAGS="$SDL_CFLAGS -DUSE_SDL"
    if [[ "x$WANT_SDLGFX" = "xyes" -o "x$GFX_DEP" = "x" ]]; then
      GFX_DEP=gfx-sdl
      GFX_NAME=SDL
    fi
  else
    AC_MSG_WARN([SDL support wanted, but libSDL could not be found])
    WANT_SDL=no
    NR_ERRORS=`expr $NR_ERRORS + 1`
  fi
fi

dnl  If we got here and we still haven't found a graphics target
dnl  then bail out.
dnl
if [[ "x$GFX_DEP" = "x" ]]; then
  AC_MSG_RESULT(none)
  AC_MSG_ERROR([Could not find a useable graphics target])
fi

AC_MSG_RESULT("$GFX_NAME")

dnl
dnl  If we're using X, find out what extensions are wanted/available
dnl
if [[ "$GFX_DEP" = "gfx-x11" ]]; then
  dnl If the user wants DGA, see if we have it.
  dnl This must come after we checked for X11.

  if [[ "x$WANT_DGA" = "xyes" ]]; then
    TMP_SAVE_LIBS=$LIBS
    LIBS="$X_LIBS $LIBS"
    AC_CHECK_LIB(Xxf86dga, XF86DGAQueryExtension, HAVE_DGA=yes, HAVE_DGA=no, [ $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS ])
    echo $LIBS
    LIBS=$TMP_SAVE_LIBS
    if [[ "x$HAVE_DGA" = "xno" ]]; then
      AC_MSG_WARN([Could not find DGA extension, ignoring --enable-dga])
      NR_ERRORS=`expr $NR_ERRORS + 1`
      WANT_DGA=no
    else
      X_CFLAGS="$X_CFLAGS -DUSE_DGA_EXTENSION"
      X_EXTRA_LIBS="$X_EXTRA_LIBS -lXxf86dga"
    fi
  fi

  if [[ "x$WANT_VIDMODE" = "xyes" ]]; then
    TMP_SAVE_LIBS=$LIBS
    LIBS="$X_LIBS $LIBS"
    AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryExtension, HAVE_VIDMODE=yes, HAVE_VIDMODE=no, [ $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS ])
    LIBS=$TMP_SAVE_LIBS
    if [[ "x$HAVE_VIDMODE" = "xno" ]]; then
      AC_MSG_WARN([Could not find VidMode extension, ignoring --enable-vidmode])
      NR_ERRORS=`expr $NR_ERRORS + 1`
      WANT_VIDMODE=no
    else
      X_CFLAGS="$X_CFLAGS -DUSE_VIDMODE_EXTENSION"
      X_EXTRA_LIBS="$X_EXTRA_LIBS -lXxf86vm"
    fi
  fi

  dnl See if we can at least compile SHM support

  if [[ "x$no_x" != "xyes" -a "x$ac_cv_header_sys_ipc_h" = "xyes" -a "x$ac_cv_header_sys_shm_h" = "xyes" ]]; then
    AC_MSG_CHECKING(whether the X11 MIT-SHM extension can be compiled in)
    TMP_SAVE_CFLAGS=$CFLAGS
    TMP_SAVE_LIBS=$LIBS
    CFLAGS="$CFLAGS $X_CFLAGS"
    LIBS="$X_LIBS $LIBS $X_PRE_LIBS -lX11 -lXext $X_EXTRA_LIBS"
    AC_TRY_LINK([
  #include "confdefs.h"
  #ifdef HAVE_SYS_TYPES_H
  #include <sys/types.h>
  #endif
  #include <X11/Xlib.h>
  #include <X11/Xutil.h>
  #include <X11/keysym.h>
  #include <X11/cursorfont.h>
  #include <sys/ipc.h>
  #include <sys/shm.h>
  #include <X11/extensions/XShm.h>],[
  static XShmSegmentInfo shminfo;
  static Display *display;
  XShmAttach(display, &shminfo);
  XSync(display,0);
  shmctl(shminfo.shmid, IPC_RMID, 0);
  ],
  SHM_SUPPORT_LINKS=1
  AC_MSG_RESULT(yes),
  SHM_SUPPORT_LINKS=0
  AC_MSG_RESULT(no))
  fi
  CFLAGS=$TMP_SAVE_CFLAGS
  LIBS=$TMP_SAVE_LIBS

  GFX_CFLAGS="$X_CFLAGS -DSHM_SUPPORT_LINKS=$SHM_SUPPORT_LINKS"
  GFX_LIBS="$X_LIBS $X_PRE_LIBS -lXext -lX11 $X_EXTRA_LIBS"
fi


dnl
dnl
dnl  Check which sound target to use
AC_MSG_CHECKING([for sound target to build])

if [[ "x$WANT_AUDIO" != "xno" ]]; then
  if [[ "x$SND_NAME" = "xnone" ]]; then
    if [[ "x$ac_cv_header_sys_audioio_h" = "xyes" -o "x$ac_cv_header_sun_audioio_h" = "xyes" ]]; then
      SND_DEP=sd-solaris
      SND_NAME=Solaris/NetBSD
      USE_SOUND=yes
    else if [[ "x$WANT_ALSA" = "xyes" ]]; then
      SND_DEP=sd-alsa
      SND_LIBS="-lasound"
      SND_NAME=ALSA
      USE_SOUND=yes
    else if [[ "x$HAVE_USS_SOUND" = "xyes" ]]; then
      SND_DEP=sd-uss
      if [[ "x$HAVE_LIBOSSAUDIO" = "xyes" ]]; then
        SND_LIBS="-lossaudio"
      fi
      SND_NAME=OSS
      USE_SOUND=yes
    else if [[ "x$HAVE_AF_LIB" = "xyes" ]]; then
      SND_DEP=sd-af
      SND_LIBS="-lAF"
      SND_NAME="AF sound"
      USE_SOUND=yes
    else if [[ "x$HAVE_SGIAUDIO_LIB" = "xyes" ]]; then
      SND_DEP=sd-sgi
      SND_LIBS="-laudio"
      SND_NAME="SGI sound"
      USE_SOUND=yes
    else if [[ "x$HAVE_MME_LIB" = "xyes" ]]; then
      SND_DEP=sd-mme
      SND_LIBS="-lmme"
      SND_NAME="MME sound"
      USE_SOUND=yes
    fi
    fi
    fi
    fi
    fi
    fi
  fi

  dnl
  dnl  Did we actually want to use SDL for sound?
  dnl
  if [[ "x$WANT_SDLSND" = "xyes" ]]; then
    if [[ "x$HAVE_SDL" = "xyes" ]]; then
      SND_DEP=sd-sdl
      SND_LIBS=
      SND_NAME=SDL
      NEED_THREAD_SUPPORT=yes
    else
      AC_MSG_WARN([SDL support wanted, but libSDL could not be found])
      WANT_SDL=no
      NR_ERRORS=`expr $NR_ERRORS + 1`
    fi
  fi

  AC_MSG_RESULT("$SND_NAME")
else
  AC_MSG_RESULT("sound support disabled")
  SND_DEP=sd-none
  SND_LIBS=
  SND_NAME=none
fi

dnl
dnl  Did we want a GUI?
dnl
AC_MSG_CHECKING([which UI target to build])
if [[ "x$WANT_UI" = "xno" ]]; then
  GUI_DEP=gui-none
  GUI_LIBS=
  GUI_NAME=none
else
  dnl Hack for building Cocoa gui on OS X
  dnl We really should reall check for the presence of objc and Cocoa first
  if [[ "$HOST_OS" = "darwin" ]]; then
    if [[ "x$WANT_COCOA_UI" != "xno" -o "x$HAVE_GTK" = "xno" ]]; then
      GUI_DEP=gui-cocoa
      GUI_LIBS=
      GUI_NAME="Cocoa"
    fi
  fi
  if [[ "$GUI_DEP" = "gui-none" ]]; then
    if [[ "x$HAVE_GTK" = "xno" ]]; then
      AC_MSG_WARN([UI wanted, but no UI useable target found])
      NR_ERRORS=`expr $NR_ERRORS + 1`
      WANT_UI=no
    else
      GUI_DEP=gui-gtk
      GUI_LIBS="$GTK_LIBS"
      GUI_NAME="GTK+"
      GUI_CFLAGS="$CFLAGS -DNO_MAIN_IN_MAIN_C"
      NEED_THREAD_SUPPORT=yes
      if [[ "x$WANT_THREADS" = "xno" ]]; then
        AC_MSG_ERROR([Thread support disabled, but GTK+ UI requires threads])
      fi
    fi
  fi
fi
AC_MSG_RESULT("$GUI_NAME")


dnl
dnl  Do we want AGA emulation
dnl
AC_MSG_CHECKING([whether to build AGA emulation])
if [[ "x$WANT_AGA" != "xno" ]]; then
  UAE_DEFINES="$UAE_DEFINES -DAGA"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi


dnl
dnl  Do we want Autoconfig?
dnl
AC_MSG_CHECKING([whether to build support for Autconfig devices])
if [[ "x$WANT_AUTOCONFIG" != "xno" ]]; then
  UAE_DEFINES="$UAE_DEFINES -DAUTOCONFIG"

  dnl  Configure hard disk emulation
  UAE_DEFINES="$UAE_DEFINES -DFILESYS"
  NEED_THREAD_SUPPORT=yes
  FILESYSOBJS="filesys.o fsdb.o fsusage.o hardfile.o"
  if [[ "x$HOST_OS" != "xwin32" ]]; then
    FILESYSOBJS="$FILESYSOBJS filesys_unix.o fsdb_unix.o hardfile_unix.o"
  else
    FILESYSOBJS="$FILESYSOBJS od-win32/fsdb_win32.o od-win32/fsdb_hardfile_win32.o"
  fi
  dnl  Filesys support currently requires threads, because hardfile
  dnl  support requires threads and we can't currently separate the
  dnl  two.
  dnl 
  dnl  Don't use use filesys threads, yet, though. It causes a massive
  dnl  performance hit on some platforms...
  dnl  UAE_DEFINES="$UAE_DEFINES -DUAE_FILESYS_THREADS"

  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi


dnl
dnl  Do we want SCSI emulation?
dnl  This needs tidying up. ;-)
dnl
AC_MSG_CHECKING([whether to build SCSI emulation])
if [[ "x$WANT_SCSIEMU" = "xyes" ]]; then
  if [[ "x$WANT_AUTOCONFIG" = "xno" ]]; then
    AC_MSG_RESULT(no)
    AC_MSG_WARN([Autoconfig support not enabled, so SCSI emulation cannot be enabled])
    NR_WARNINGS=`expr $NR_WARNINGS + 1`
    WANT_SCSIEMU=no
  else
    SCGLIBS="-lscg -lschily"
    if [[ "$HOST_OS" = "darwin" ]]; then
      SCGLIBS="$SCGLIBS -framework IOKit -framework CoreFoundation"
    fi
    AC_MSG_RESULT(yes)
    AC_MSG_CHECKING([for libscg and libschily])
    OLDLIBS="$LIBS"
    OLDCPPFLAGS="$CPPFLAGS"
    if [[ "x$LIBSCG_PREFIX" != "x" ]]; then
       LIBSCG_CPPFLAGS="-I$LIBSCG_PREFIX/include"
       LIBSCG_LIBS="-L$LIBSCG_PREFIX/lib"
    fi
    if [[ "x$LIBSCG_INCLUDEDIR" != "x" ]]; then
       LIBSCG_CPPFLAGS="-I$LIBSCG_INCLUDEDIR"
    fi
    if [[ "x$LIBSCG_LIBDIR" != "x" ]]; then
       LIBSCG_LIBS="-L$LIBSCG_LIBDIR $SCGLIBS"
    else
       LIBSCG_LIBS="$SCGLIBS"
    fi
    LIBS="$LIBS $LIBSCG_LIBS"
    CPPFLAGS="$CPPFLAGS $LIBSCG_CPPFLAGS"
    AC_TRY_LINK([
typedef int BOOL;
#include "scg/scgcmd.h"
#include "scg/scsitransp.h"
#include "scg/scsireg.h"],
[{SCSI *scgp = scg_open (0, 0, 0, 0, 0);}],
    [
      AC_MSG_RESULT(yes)
      SCSIOBJS="scsiemul.o blkdev.o blkdev-libscg.o"
      UAE_DEFINES="$UAE_DEFINES -DSCSIEMU"
      UAE_CPPFLAGS="$UAE_CPPFLAGS $LIBSCG_CPPFLAGS"
      UAE_LIBS="$UAE_LIBS $LIBSCG_LIBS"
      NEED_THREAD_SUPPORT=yes
    ],
    [
      AC_MSG_RESULT(no)
      AC_MSG_CHECKING([for libscg and libschily in UAE source tree])
      LIBSCG_CPPFLAGS="$OLDCPPFLAGS -I$srcdir/src/include"
      LIBSCG_LIBS="-L$srcdir/src $OLDLIBS $SCGLIBS"
      CPPFLAGS="$LIBSCG_CPPFLAGS"
      LIBS="$LIBSCG_LIBS"
      AC_TRY_LINK([
typedef int BOOL;
#include "scg/scgcmd.h"
#include "scg/scsitransp.h"
#include "scg/scsireg.h"],
[{SCSI *scgp = scg_open (0, 0, 0, 0, 0);}],
      [
        AC_MSG_RESULT(yes)
        SCSIOBJS="scsiemul.o blkdev.o blkdev-libscg.o"
        UAE_DEFINES="$UAE_DEFINES -DSCSIEMU"
        NEED_THREAD_SUPPORT=yes
        if [[ "$srcdir" != "." ]]; then
          AC_CONFIG_LINKS(src/libscg.a:src/libscg.a)
          AC_CONFIG_LINKS(src/libschily.a:src/libschily.a)
	  UAE_LIBS="$UAE_LIBS $LIBSCG_LIBS"
        else
          UAE_LIBS="$UAE_LIBS -L. $SCGLIBS"
        fi
      ],
      [
        AC_MSG_RESULT(no)
        NR_WARNINGS=`expr $NR_WARNINGS + 1`
        echo "Please refer to the UAE SCSI device section in docs/README for installation instructions."
        WANT_SCSIEMU=no
      ])
    LIBS="$OLDLIBS"
    CPPFLAGS="$OLDCPPFLAGS"
    ])
  fi
else
  AC_MSG_RESULT(no)
fi
if [[ "x$WANT_SCSIEMU" != "xyes" ]]; then
  SCSIOBJS="scsi-none.o"
  AC_MSG_RESULT(no)
fi


dnl
dnl  Do we want CDTV emulation ?
dnl
if [[ "x$WANT_CDTV" != "xyes" -a "x$WANT_SCSIEMU" != "xyes" ]]; then
  WANT_CDTV=no
fi
AC_MSG_CHECKING([whether to build CDTV emulation])
if [[ "x$WANT_CDTV" != "xno" ]]; then
  AC_MSG_RESULT(yes)
  if [[ "x$WANT_SCSIEMU" != "xyes" ]]; then
    AC_MSG_WARN([SCSI support is not enabled or cannot be built. Disabling CDTV emulation])
    NR_WARNINGS=`expr $NR_WARNINGS + 1`
    WANT_CDTV=no
  else
    UAE_DEFINES="$UAE_DEFINES -DCDTV"
    CDOBJS="cdrom.o"
  fi
else
  AC_MSG_RESULT(no)
fi


dnl
dnl  Do we want CD32 emulation ?
dnl
if [[ "x$WANT_CD32" != "xyes" ]]; then
  if [[ "x$WANT_SCSIEMU" != "xyes" -o "x$WANT_AGA" = "xno" ]]; then
    WANT_CD32=no
  fi
fi
AC_MSG_CHECKING([whether to build CD32 emulation])
if [[ "x$WANT_CD32" != "xno" ]]; then
  AC_MSG_RESULT(yes)
  if [[ "x$WANT_SCSIEMU" != "xyes" ]]; then
    AC_MSG_WARN([SCSI support is not enabled or cannot be built. Disabling CD32 emulation])
    NR_WARNINGS=`expr $NR_WARNINGS + 1`
    WANT_CD32=no
  else
    if [[ "x$WANT_AGA" != "xyes" ]]; then
      AC_MSG_WARN([AGA emulation is not enabled. Disabling CD32 emulation])
      NR_WARNINGS=`expr $NR_WARNINGS + 1`
      WANT_CD32=no
    else
      UAE_DEFINES="$UAE_DEFINES -DCD32"
      if [[ "x$WANT_CDTV" = "xno" ]]; then
        CDOBJS="cdrom.o"
      fi
      CDOBJS="$CDOBJS akiko.o"
    fi
  fi
else
  AC_MSG_RESULT(no)
fi


dnl
dnl  Do we want bsdsocket.library emulation?
dnl
AC_MSG_CHECKING([whether to build bsdsocket.library emulation])
if [[ "x$WANT_BSDSOCK" != "xno" -o "x$WANT_BSDSOCK_NEW" != "xno" ]]; then
  if [[ "x$WANT_AUTOCONFIG" = "xno" ]]; then
    AC_MSG_RESULT(no)
    AC_MSG_WARN([Autoconfig support not enabled, so bsdsocket emulation cannot be enabled])
    NR_WARNINGS=`expr $NR_WARNINGS + 1`
  else
    NEED_THREAD_SUPPORT=yes
    UAE_DEFINES="$UAE_DEFINES -DBSDSOCKET"
    AC_MSG_RESULT(yes)
    if [[ "$HOST_OS" != "win32" ]]; then
      if [[ "$HOST_CPU" != "i386" -a "$HOST_CPU" != "ppc" ]]; then
        if [[ "x$WANT_BSDSOCK_NEW" = "xyes" ]]; then
	  AC_MSG_WARN([New bsdsocket emulation not supported on your CPU. Enabling old emulation.])
	  WANT_BSDSOCK_NEW=no
	fi
      fi
      if [[ "x$WANT_BSDSOCK_NEW" = "xyes" ]]; then
        BSDSOCKOBJS="bsdsocket-posix-new.o bsdsocket.o"
      else
        BSDSOCKOBJS="bsdsocket-posix.o"
      fi
    else
      BSDSOCKOBJS="bsdsocket.o"
    fi
  fi
else
  AC_MSG_RESULT(no)
  BSDSOCKOBJS="bsdsocket-posix.o"
fi


dnl
dnl  Check whether we want or need threads
dnl
AC_MSG_CHECKING([whether to build with threads])
if [[ "x$WANT_THREADS" = "xyes" -o "x$NEED_THREAD_SUPPORT" = "xyes" ]]; then
  AC_MSG_RESULT(yes)
  AC_MSG_CHECKING([which thread target to build])
  if [[ "$THREADDEP" = "td-none" ]]; then
    AC_MSG_ERROR([Thread support wanted or required, but no thread target found])
  fi
  if [[ "$THREADDEP" = "td-posix" ]]; then
    CC="$PTHREAD_CC"
    UAE_CFLAGS="$UAE_CFLAGS $PTHREAD_CFLAGS"
    UAE_LIBS="$UAE_LIBS $PTHREAD_LIBS"

    dnl Hack to use named semaphores on OS X/darwin
    dnl This needs to be properly checked when detecting pthreads!
    if [[ "$HOST_OS" = "darwin" ]]; then
      UAE_DEFINES="$UAE_DEFINES -DUSE_NAMED_SEMAPHORES"
    fi
  fi
  UAE_DEFINES="$UAE_DEFINES -DSUPPORT_THREADS"
  AC_MSG_RESULT($THREADNAME)
else
  THREADDEP=td-none
  AC_MSG_RESULT(no)
fi


dnl
dnl  Check for CAPS API
dnl
WANT_CAPS=dunno
AC_ARG_WITH(caps,        AS_HELP_STRING([--with-caps],        [Build with support for CAPS/IPF disk images) (default auto)]), [WANT_CAPS=$withval],[])
AC_ARG_WITH(caps-prefix, AS_HELP_STRING([--with-caps-prefix], [Prefix where CAPS API is installed (optional)]),                 [CAPS_PREFIX=$withval],[])
if [[ "x$WANT_CAPS" != "xno" ]]; then
  SAVE_CPPFLAGS="$CPPFLAGS"
  CAPS_CPPFLAGS="-I$CAPS_PREFIX/include"
  if [[ "x$CAPS_PREFIX" != "x" ]]; then
    CPPFLAGS="$CPPFLAGS $CAPS_CPPFLAGS"
  fi
  AC_CHECK_HEADERS(caps/capsimage.h, [HAVE_CAPS=yes], [HAVE_CAPS=no])
  if [[ "$HAVE_CAPS" = "yes" ]]; then
    UAE_DEFINES="$UAE_DEFINES -DCAPS"
    UAE_CPPFLAGS="$UAE_CPPFLAGS $CAPS_CPPFLAGS"
  else
    if [[ "$WANT_CAPS" = "yes" ]]; then
      AC_MSG_WARN([CAPS support wanted, but CAPS API not found])
      WANT_CAPS=no
    fi
  fi
  CPPFLAGS="$SAVE_CPPFLAGS"
fi


dnl
dnl  Check whether FDI support wanted
dnl
if [[ "x$WANT_FDI" != "xno" ]]; then
  UAE_DEFINES="$UAE_DEFINES -DFDI2RAW"
fi


dnl
dnl  Build fake enforcer?
dnl
AC_MSG_CHECKING([whether to build with enforcer])
if [[ "x$WANT_ENFORCER" != "xno" ]]; then
  if [[ "x$WANT_AUTOCONFIG" != "xno" ]]; then
    AC_MSG_RESULT(yes)
    UAE_DEFINES="$UAE_DEFINES -DENFORCER"
  else
    AC_MSG_RESULT(no)
    AC_MSG_WARN([Autoconfig support not enabled, so enforcer emulation cannot be enabled])
  fi
else
  AC_MSG_RESULT(no)
fi


dnl
dnl  Build Action Replay emulation
dnl
AC_MSG_CHECKING([whether to build Action Replay emulation])
if [[ "x$WANT_ACTION_REPLAY" != "xno" ]]; then
  AC_MSG_RESULT(yes)
  UAE_DEFINES="$UAE_DEFINES -DACTION_REPLAY"
else
  AC_MSG_RESULT(no)
fi


LIBS="$LIBS $UAE_LIBS $GUI_LIBS $GFX_LIBS $SND_LIBS $JOY_LIBS $MATHLIB"
CPPFLAGS="$CPPFLAGS $UAE_DEFINES $UAE_CPPFLAGS"
CFLAGS="$CFLAGS $UAE_CFLAGS $GUI_CFLAGS $GFX_CFLAGS $SND_CFLAGS $JOY_CFLAGS"

AC_CONFIG_LINKS(src/target.h:src/targets/$TARGETDEP)
AC_CONFIG_LINKS(src/machdep:src/$MACHDEP)
AC_CONFIG_LINKS(src/md-fpp.h:src/include/$MDFPP_H)
AC_CONFIG_LINKS(src/osdep:src/$OSDEP)
AC_CONFIG_LINKS(src/gfxdep:src/$GFX_DEP)
AC_CONFIG_LINKS(src/sounddep:src/$SND_DEP)
AC_CONFIG_LINKS(src/threaddep:src/$THREADDEP)
AC_CONFIG_LINKS(src/joydep:src/$JOY_DEP)
AC_CONFIG_LINKS(src/guidep:src/$GUI_DEP)

AC_CONFIG_FILES([Makefile
		 src/Makefile
		 src/dms/Makefile
		 src/caps/Makefile
		 src/md-generic/Makefile
		 src/md-i386-gcc/Makefile
		 src/md-i386-watcom/Makefile
		 src/md-ppc-gcc/Makefile
		 src/md-ppc/Makefile
		 src/md-68k/Makefile
		 src/od-generic/Makefile
		 src/od-linux/Makefile
		 src/od-amiga/Makefile
		 src/od-beos/Makefile
		 src/od-macos/Makefile
		 src/od-macosx/Makefile
		 src/od-macosx/bin/Makefile
		 src/od-macosx/lib/Makefile
		 src/td-none/Makefile
		 src/td-amigaos/Makefile
		 src/td-beos/Makefile
		 src/td-posix/Makefile
		 src/td-sdl/Makefile
		 src/gfx-amigaos/Makefile
		 src/gfx-beos/Makefile
		 src/gfx-x11/Makefile
		 src/gfx-sdl/Makefile
		 src/gfx-curses/Makefile
		 src/gfx-svga/Makefile
		 src/sd-af/Makefile
		 src/sd-alsa/Makefile
		 src/sd-amigaos/Makefile
		 src/sd-beos/Makefile
		 src/sd-file/Makefile
		 src/sd-mme/Makefile
		 src/sd-none/Makefile
		 src/sd-sdl/Makefile
		 src/sd-sgi/Makefile
		 src/sd-solaris/Makefile
		 src/sd-uss/Makefile
		 src/jd-none/Makefile
		 src/jd-amigaos/Makefile
		 src/jd-beos/Makefile
		 src/jd-linuxold/Makefile
		 src/jd-sdl/Makefile
		 src/gui-none/Makefile
		 src/gui-beos/Makefile
		 src/gui-cocoa/Makefile
		 src/gui-gtk/Makefile
		 src/gui-muirexx/Makefile
		 src/keymap/Makefile
])

AC_SUBST(ac_cv_c_inline)
AC_SUBST(WRCPRG)
AC_SUBST(NO_SCHED_CFLAGS)
AC_SUBST(GENCPUOPTS)
AC_SUBST(TARGET)
AC_SUBST(MACHDEP)
AC_SUBST(OSDEP)
AC_SUBST(THREADDEP)
AC_SUBST(GFX_DEP)
AC_SUBST(SND_DEP)
AC_SUBST(JOY_DEP)
AC_SUBST(GUI_DEP)
AC_SUBST(CPUOBJS)
AC_SUBST(JITOBJS)
AC_SUBST(RESOBJS)
AC_SUBST(ASMOBJS)
AC_SUBST(SCSIOBJS)
AC_SUBST(CDOBJS)
AC_SUBST(DEBUGOBJS)
AC_SUBST(FILESYSOBJS)
AC_SUBST(BSDSOCKOBJS)
AC_SUBST(UAE_RSRCFILE)
AC_SUBST(SET_MAKE)
AC_SUBST(MATHLIB)
AC_SUBST(top_srcdir)

dnl  If we're not cross-compiling then, the config script in src/tools
dnl  can be called by config.status as normal
dnl
if [[ "x$cross_compiling" != "xyes" ]]; then
  AC_CONFIG_SUBDIRS(src/tools)
fi

AC_OUTPUT

dnl  However, if we are cross-compiling, then we need to call
dnl  configure in src/tools manually ourselves. This is because
dnl  autoconf currently has no support for building host tools
dnl  when cross-compiling. Okay. This is a hack. But it works. Can
dnl  anybody think of a better way of doing this?
dnl
if [[ "x$cross_compiling" = "xyes" ]]; then
  export CC=$CC_FOR_BUILD
  export CFLAGS=$CFLAGS_FOR_BUILD
  mkdir -p src/tools
  cd  src/tools && ../../"$srcdir"/src/tools/configure --cache-file=/dev/null --host=$build --target=$host
fi
